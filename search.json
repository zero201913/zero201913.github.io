[{"title":"流程图测试","url":"/2025/10/26/流程图测试/","content":"\n# 我的流程图文章\n\n以下是一个简单的流程图：\n\n```mermaid\ngraph TD;\n    A[开始] --> B{判断条件};\n    B -->|是| C[操作1];\n    B -->|否| D[操作2];\n    C --> E[结束];\n    D --> E;\n```\n\n```mermaid\ngraph TD;\n    A[开始] --> B{是否继续?};\n    B -- 是 --> C[执行任务];\n    B -- 否 --> D[停止];\n    C --> A;\n```\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/6468f1851ffd405bdabb7f1a5869dd72.jpg)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/74ef64b707b3d1edd9a4a88c7dd6a9fe.png)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/8d1b903e9593fbc3687b15458ca6428a.png)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/709e9fa860baf03723af5a3a7cd16a2a.jpg)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/786f33f9cf630011cb5e357c16bcc159.png)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/d9a30670ea9c6ef1a20696bc3fcb1521.jpg)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/b7525824a2116a75ae201336daaea95c.jpg)\n\n![](https://tncache1-f1.v3mh.com/image/2025/10/26/8ae14bd9ed5e1c98cbda9dc0872a1470.jpg)\n"},{"title":"Cookie 与 Session 概念解析及应用场景","url":"/2025/10/15/Cookie 与 Session 概念解析及应用场景/","content":"## 一、基本概念对比\n\n### Cookie\n**定义**：存储在客户端的小型文本文件，由服务器发送到浏览器并保存在本地。\n\n**特性**：\n- 存储在客户端浏览器中\n- 有大小限制（约4KB）\n- 可设置过期时间\n- 每次请求自动携带到服务器\n- 可被用户禁用或清除\n\n### Session\n**定义**：存储在服务器端的用户状态信息，通过Session ID与客户端关联。\n\n**特性**：\n- 存储在服务器内存或数据库中\n- 存储容量较大\n- 默认浏览器关闭后失效\n- 更安全，敏感数据不暴露给客户端\n- 服务器资源占用较多\n\n## 二、实际应用场景演示\n\n下面通过一个用户登录系统来展示Cookie和Session的不同应用：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cookie vs Session 应用示例</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            padding: 20px;\n            color: #333;\n        }\n        \n        .container {\n            max-width: 1000px;\n            margin: 0 auto;\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 30px;\n        }\n        \n        @media (max-width: 768px) {\n            .container {\n                grid-template-columns: 1fr;\n            }\n        }\n        \n        .card {\n            background: white;\n            border-radius: 15px;\n            padding: 30px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n        }\n        \n        h1 {\n            text-align: center;\n            color: white;\n            margin-bottom: 30px;\n            font-size: 2.5rem;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n            grid-column: 1 / -1;\n        }\n        \n        h2 {\n            color: #4a5568;\n            margin-bottom: 20px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid #e2e8f0;\n        }\n        \n        .concept-section {\n            margin-bottom: 25px;\n        }\n        \n        .concept-title {\n            font-size: 1.2rem;\n            color: #2d3748;\n            margin-bottom: 10px;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .concept-desc {\n            color: #4a5568;\n            line-height: 1.6;\n            background: #f7fafc;\n            padding: 15px;\n            border-radius: 8px;\n            border-left: 4px solid #667eea;\n        }\n        \n        .login-form {\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n        }\n        \n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 5px;\n        }\n        \n        label {\n            font-weight: 600;\n            color: #4a5568;\n        }\n        \n        input[type=\"text\"],\n        input[type=\"password\"] {\n            padding: 12px;\n            border: 2px solid #e2e8f0;\n            border-radius: 8px;\n            font-size: 1rem;\n            transition: border-color 0.3s;\n        }\n        \n        input[type=\"text\"]:focus,\n        input[type=\"password\"]:focus {\n            outline: none;\n            border-color: #667eea;\n        }\n        \n        .checkbox-group {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n            margin: 10px 0;\n        }\n        \n        .btn {\n            padding: 12px 20px;\n            border: none;\n            border-radius: 8px;\n            font-size: 1rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: all 0.3s;\n        }\n        \n        .btn-primary {\n            background: #667eea;\n            color: white;\n        }\n        \n        .btn-primary:hover {\n            background: #5a6fd8;\n            transform: translateY(-2px);\n        }\n        \n        .btn-secondary {\n            background: #e2e8f0;\n            color: #4a5568;\n        }\n        \n        .btn-secondary:hover {\n            background: #cbd5e0;\n        }\n        \n        .user-panel {\n            display: none;\n            text-align: center;\n            padding: 20px;\n        }\n        \n        .user-info {\n            background: #f0fff4;\n            padding: 20px;\n            border-radius: 10px;\n            margin: 20px 0;\n            border-left: 4px solid #48bb78;\n        }\n        \n        .data-display {\n            margin-top: 20px;\n            text-align: left;\n        }\n        \n        .data-item {\n            display: flex;\n            justify-content: space-between;\n            padding: 10px 0;\n            border-bottom: 1px solid #e2e8f0;\n        }\n        \n        .data-label {\n            font-weight: 600;\n            color: #4a5568;\n        }\n        \n        .data-value {\n            color: #2d3748;\n            font-family: monospace;\n            background: #f7fafc;\n            padding: 2px 6px;\n            border-radius: 4px;\n        }\n        \n        .storage-visual {\n            display: flex;\n            justify-content: space-around;\n            margin: 20px 0;\n            padding: 20px;\n            background: #f7fafc;\n            border-radius: 10px;\n        }\n        \n        .storage-item {\n            text-align: center;\n        }\n        \n        .storage-icon {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n        }\n        \n        .cookie-icon {\n            color: #e53e3e;\n        }\n        \n        .session-icon {\n            color: #38a169;\n        }\n        \n        .scenario-section {\n            margin-top: 30px;\n        }\n        \n        .scenario-list {\n            list-style-type: none;\n        }\n        \n        .scenario-item {\n            padding: 12px 15px;\n            margin-bottom: 10px;\n            background: #f7fafc;\n            border-radius: 8px;\n            border-left: 4px solid #667eea;\n        }\n        \n        .scenario-title {\n            font-weight: 600;\n            margin-bottom: 5px;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        \n        .cookie-scenario {\n            border-left-color: #e53e3e;\n        }\n        \n        .session-scenario {\n            border-left-color: #38a169;\n        }\n        \n        .status-message {\n            padding: 10px 15px;\n            border-radius: 8px;\n            margin: 15px 0;\n            text-align: center;\n            display: none;\n        }\n        \n        .status-success {\n            background: #f0fff4;\n            color: #38a169;\n            border: 1px solid #c6f6d5;\n        }\n        \n        .status-error {\n            background: #fed7d7;\n            color: #e53e3e;\n            border: 1px solid #feb2b2;\n        }\n        \n        .comparison-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n        \n        .comparison-table th,\n        .comparison-table td {\n            padding: 12px 15px;\n            text-align: left;\n            border-bottom: 1px solid #e2e8f0;\n        }\n        \n        .comparison-table th {\n            background: #f7fafc;\n            font-weight: 600;\n            color: #4a5568;\n        }\n        \n        .cookie-row {\n            background: #fff5f5;\n        }\n        \n        .session-row {\n            background: #f0fff4;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Cookie 与 Session 概念及应用</h1>\n        \n        <div class=\"card\">\n            <h2>🔐 登录系统演示</h2>\n            \n            <div id=\"login-form\">\n                <div class=\"login-form\">\n                    <div class=\"form-group\">\n                        <label for=\"username\">用户名</label>\n                        <input type=\"text\" id=\"username\" placeholder=\"请输入用户名\">\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"password\">密码</label>\n                        <input type=\"password\" id=\"password\" placeholder=\"请输入密码\">\n                    </div>\n                    \n                    <div class=\"checkbox-group\">\n                        <input type=\"checkbox\" id=\"remember-me\">\n                        <label for=\"remember-me\">记住我（使用Cookie）</label>\n                    </div>\n                    \n                    <button class=\"btn btn-primary\" id=\"login-btn\">登录</button>\n                </div>\n            </div>\n            \n            <div id=\"user-panel\" class=\"user-panel\">\n                <div class=\"user-info\">\n                    <h3>欢迎, <span id=\"welcome-user\">用户</span>!</h3>\n                    <p>您已成功登录系统</p>\n                </div>\n                \n                <div class=\"data-display\">\n                    <h4>当前存储状态：</h4>\n                    <div class=\"data-item\">\n                        <span class=\"data-label\">Cookie 数据：</span>\n                        <span class=\"data-value\" id=\"cookie-data\">无</span>\n                    </div>\n                    <div class=\"data-item\">\n                        <span class=\"data-label\">Session 数据：</span>\n                        <span class=\"data-value\" id=\"session-data\">无</span>\n                    </div>\n                    <div class=\"data-item\">\n                        <span class=\"data-label\">Session ID：</span>\n                        <span class=\"data-value\" id=\"session-id\">未生成</span>\n                    </div>\n                </div>\n                \n                <button class=\"btn btn-secondary\" id=\"logout-btn\" style=\"margin-top: 20px;\">退出登录</button>\n            </div>\n            \n            <div id=\"status-message\" class=\"status-message\"></div>\n        </div>\n        \n        <div class=\"card\">\n            <h2>📊 概念对比</h2>\n            \n            <div class=\"concept-section\">\n                <div class=\"concept-title\">\n                    <span style=\"color: #e53e3e;\">●</span> Cookie（客户端存储）\n                </div>\n                <div class=\"concept-desc\">\n                    Cookie是服务器发送到用户浏览器并保存在本地的小型数据片段，会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器。\n                </div>\n            </div>\n            \n            <div class=\"concept-section\">\n                <div class=\"concept-title\">\n                    <span style=\"color: #38a169;\">●</span> Session（服务器端存储）\n                </div>\n                <div class=\"concept-desc\">\n                    Session是服务器端的一种机制，用于存储用户的状态信息。每个用户会话对应一个唯一的Session ID，通常通过Cookie存储在客户端。\n                </div>\n            </div>\n            \n            <div class=\"storage-visual\">\n                <div class=\"storage-item\">\n                    <div class=\"storage-icon cookie-icon\">🍪</div>\n                    <div>Cookie</div>\n                    <div>客户端存储</div>\n                </div>\n                <div class=\"storage-item\">\n                    <div class=\"storage-icon session-icon\">💾</div>\n                    <div>Session</div>\n                    <div>服务器存储</div>\n                </div>\n            </div>\n            \n            <table class=\"comparison-table\">\n                <thead>\n                    <tr>\n                        <th>特性</th>\n                        <th>Cookie</th>\n                        <th>Session</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr class=\"cookie-row\">\n                        <td>存储位置</td>\n                        <td>客户端浏览器</td>\n                        <td>服务器端</td>\n                    </tr>\n                    <tr class=\"session-row\">\n                        <td>安全性</td>\n                        <td>较低（用户可见）</td>\n                        <td>较高（服务器控制）</td>\n                    </tr>\n                    <tr class=\"cookie-row\">\n                        <td>存储容量</td>\n                        <td>约4KB</td>\n                        <td>较大（依赖服务器配置）</td>\n                    </tr>\n                    <tr class=\"session-row\">\n                        <td>生命周期</td>\n                        <td>可设置过期时间</td>\n                        <td>浏览器关闭或超时</td>\n                    </tr>\n                    <tr class=\"cookie-row\">\n                        <td>性能影响</td>\n                        <td>每次请求携带</td>\n                        <td>服务器资源占用</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n        \n        <div class=\"card\" style=\"grid-column: 1 / -1;\">\n            <h2>🎯 应用场景分析</h2>\n            \n            <div class=\"scenario-section\">\n                <h3>Cookie 适用场景：</h3>\n                <ul class=\"scenario-list\">\n                    <li class=\"scenario-item cookie-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>👤</span> 用户偏好设置\n                        </div>\n                        <div>存储语言偏好、主题设置、页面布局等用户个性化配置</div>\n                    </li>\n                    <li class=\"scenario-item cookie-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>🛒</span> 购物车信息\n                        </div>\n                        <div>在用户未登录时临时保存购物车中的商品信息</div>\n                    </li>\n                    <li class=\"scenario-item cookie-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>📱</span> 保持登录状态\n                        </div>\n                        <div>\"记住我\"功能，通过长期有效的Cookie实现自动登录</div>\n                    </li>\n                    <li class=\"scenario-item cookie-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>📊</span> 用户行为追踪\n                        </div>\n                        <div>网站分析、广告投放等需要跨会话追踪用户行为的场景</div>\n                    </li>\n                </ul>\n            </div>\n            \n            <div class=\"scenario-section\">\n                <h3>Session 适用场景：</h3>\n                <ul class=\"scenario-list\">\n                    <li class=\"scenario-item session-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>🔐</span> 用户登录状态\n                        </div>\n                        <div>存储用户登录凭证、权限信息等敏感数据</div>\n                    </li>\n                    <li class=\"scenario-item session-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>💳</span> 敏感交易信息\n                        </div>\n                        <div>支付流程、个人信息修改等需要高安全性的操作</div>\n                    </li>\n                    <li class=\"scenario-item session-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>🔄</span> 多步骤表单\n                        </div>\n                        <div>存储复杂的多页面表单数据，确保数据一致性</div>\n                    </li>\n                    <li class=\"scenario-item session-scenario\">\n                        <div class=\"scenario-title\">\n                            <span>👥</span> 临时会话数据\n                        </div>\n                        <div>存储仅在当前会话期间需要的数据，如验证码、临时令牌等</div>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // 模拟服务器端的Session存储\n        let sessionStorage = {};\n        let currentSessionId = null;\n        \n        // 生成随机ID函数\n        function generateId() {\n            return 'session_' + Math.random().toString(36).substr(2, 9);\n        }\n        \n        // 显示状态消息\n        function showMessage(message, type) {\n            const messageEl = document.getElementById('status-message');\n            messageEl.textContent = message;\n            messageEl.className = `status-message status-${type}`;\n            messageEl.style.display = 'block';\n            \n            setTimeout(() => {\n                messageEl.style.display = 'none';\n            }, 3000);\n        }\n        \n        // 设置Cookie\n        function setCookie(name, value, days) {\n            let expires = \"\";\n            if (days) {\n                const date = new Date();\n                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n                expires = \"; expires=\" + date.toUTCString();\n            }\n            document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n            updateDisplay();\n        }\n        \n        // 获取Cookie\n        function getCookie(name) {\n            const nameEQ = name + \"=\";\n            const ca = document.cookie.split(';');\n            for(let i = 0; i < ca.length; i++) {\n                let c = ca[i];\n                while (c.charAt(0) === ' ') c = c.substring(1, c.length);\n                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);\n            }\n            return null;\n        }\n        \n        // 删除Cookie\n        function deleteCookie(name) {\n            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/';\n            updateDisplay();\n        }\n        \n        // 创建Session\n        function createSession(userData) {\n            const sessionId = generateId();\n            sessionStorage[sessionId] = {\n                user: userData,\n                createdAt: new Date().toISOString(),\n                lastActivity: new Date().toISOString()\n            };\n            currentSessionId = sessionId;\n            \n            // 设置Session Cookie（浏览器关闭时过期）\n            setCookie('session_id', sessionId, 0);\n            \n            return sessionId;\n        }\n        \n        // 获取Session数据\n        function getSession() {\n            const sessionId = getCookie('session_id');\n            if (sessionId && sessionStorage[sessionId]) {\n                // 更新最后活动时间\n                sessionStorage[sessionId].lastActivity = new Date().toISOString();\n                currentSessionId = sessionId;\n                return sessionStorage[sessionId];\n            }\n            return null;\n        }\n        \n        // 销毁Session\n        function destroySession() {\n            const sessionId = getCookie('session_id');\n            if (sessionId) {\n                delete sessionStorage[sessionId];\n                deleteCookie('session_id');\n                currentSessionId = null;\n            }\n        }\n        \n        // 更新显示\n        function updateDisplay() {\n            // 显示Cookie数据\n            const rememberMe = getCookie('remember_me');\n            document.getElementById('cookie-data').textContent = \n                rememberMe ? `用户名: ${rememberMe}` : '无';\n            \n            // 显示Session数据\n            const session = getSession();\n            if (session) {\n                document.getElementById('session-data').textContent = \n                    `用户: ${session.user.username}, 登录时间: ${new Date(session.createdAt).toLocaleTimeString()}`;\n                document.getElementById('session-id').textContent = currentSessionId;\n            } else {\n                document.getElementById('session-data').textContent = '无';\n                document.getElementById('session-id').textContent = '未生成';\n            }\n        }\n        \n        // 登录功能\n        document.getElementById('login-btn').addEventListener('click', function() {\n            const username = document.getElementById('username').value;\n            const password = document.getElementById('password').value;\n            const rememberMe = document.getElementById('remember-me').checked;\n            \n            if (!username || !password) {\n                showMessage('请输入用户名和密码', 'error');\n                return;\n            }\n            \n            // 模拟登录验证\n            if (username === 'admin' && password === '123456') {\n                // 创建Session（总是创建）\n                createSession({ username, loginTime: new Date().toISOString() });\n                \n                // 如果选择\"记住我\"，设置长期Cookie\n                if (rememberMe) {\n                    setCookie('remember_me', username, 30); // 30天有效期\n                } else {\n                    deleteCookie('remember_me');\n                }\n                \n                // 更新界面\n                document.getElementById('login-form').style.display = 'none';\n                document.getElementById('user-panel').style.display = 'block';\n                document.getElementById('welcome-user').textContent = username;\n                \n                showMessage('登录成功！', 'success');\n                updateDisplay();\n            } else {\n                showMessage('用户名或密码错误', 'error');\n            }\n        });\n        \n        // 退出登录\n        document.getElementById('logout-btn').addEventListener('click', function() {\n            destroySession();\n            deleteCookie('remember_me');\n            \n            document.getElementById('login-form').style.display = 'block';\n            document.getElementById('user-panel').style.display = 'none';\n            document.getElementById('username').value = '';\n            document.getElementById('password').value = '';\n            \n            showMessage('已退出登录', 'success');\n            updateDisplay();\n        });\n        \n        // 页面加载时检查记住我状态\n        window.addEventListener('load', function() {\n            const rememberedUser = getCookie('remember_me');\n            if (rememberedUser) {\n                document.getElementById('username').value = rememberedUser;\n                document.getElementById('remember-me').checked = true;\n            }\n            \n            // 检查是否有活跃Session\n            const session = getSession();\n            if (session) {\n                document.getElementById('login-form').style.display = 'none';\n                document.getElementById('user-panel').style.display = 'block';\n                document.getElementById('welcome-user').textContent = session.user.username;\n            }\n            \n            updateDisplay();\n        });\n        \n        // 模拟自动Session过期（15秒后）\n        setInterval(() => {\n            const session = getSession();\n            if (session) {\n                const lastActivity = new Date(session.lastActivity);\n                const now = new Date();\n                const diff = (now - lastActivity) / 1000; // 秒\n                \n                if (diff > 15) { // 15秒后过期\n                    destroySession();\n                    document.getElementById('login-form').style.display = 'block';\n                    document.getElementById('user-panel').style.display = 'none';\n                    showMessage('会话已过期，请重新登录', 'error');\n                    updateDisplay();\n                }\n            }\n        }, 5000);\n    </script>\n</body>\n</html>\n```\n\n## 三、核心区别总结\n\n| 特性         | Cookie                   | Session                      |\n| ------------ | ------------------------ | ---------------------------- |\n| **存储位置** | 客户端浏览器             | 服务器端                     |\n| **安全性**   | 较低（用户可见可修改）   | 较高（服务器控制）           |\n| **存储容量** | 约4KB                    | 较大（依赖服务器配置）       |\n| **生命周期** | 可设置长期有效           | 浏览器关闭或超时失效         |\n| **性能影响** | 每次请求自动携带         | 服务器资源占用               |\n| **适用场景** | 用户偏好、追踪、临时数据 | 登录状态、敏感信息、交易数据 |\n\n## 四、最佳实践建议\n\n1. **混合使用**：结合两者优势，用Session存储敏感信息，用Cookie存储非敏感偏好设置\n\n2. **安全措施**：\n   - 对敏感Cookie设置HttpOnly和Secure标志\n   - 使用HTTPS传输\n   - 定期更换Session ID\n\n3. **性能优化**：\n   - 避免在Cookie中存储大量数据\n   - 合理设置Session超时时间\n   - 对大型应用考虑分布式Session存储\n\n这个示例完整展示了Cookie和Session的概念、区别以及在实际应用中的不同使用场景！","categories":["Web开发"]},{"title":"Commons IO 和 Commons FileUpload 文件上传下载实现","url":"/2025/10/15/Commons IO 和 Commons FileUpload 文件上传下载实现/","content":"\n## 一、环境准备和依赖配置\n\n通过传统的jsp+servlet+maven项目，来实现一个本地文件上传下载的功能，通过两个jar包来实现。\n\n### Maven 依赖\n```xml\n<dependencies>\n    <!-- Commons FileUpload -->\n    <dependency>\n        <groupId>commons-fileupload</groupId>\n        <artifactId>commons-fileupload</artifactId>\n        <version>1.5</version>\n    </dependency>\n    \n    <!-- Commons IO -->\n    <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>2.11.0</version>\n    </dependency>\n    \n    <!-- Servlet API -->\n    <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>4.0.1</version>\n        <scope>provided</scope>\n    </dependency>\n</dependencies>\n```\n\n### 项目结构\n```\nproject/\n├── src/\n│   └── main/\n│       ├── java/\n│       │   └── com/example/\n│       │       ├── servlet/\n│       │       │   ├── FileUploadServlet.java\n│       │       │   └── FileDownloadServlet.java\n│       │       └── util/\n│       │           └── FileUtil.java\n│       └── webapp/\n│           ├── WEB-INF/\n│           │   └── web.xml\n│           ├── index.html\n│           ├── upload.jsp\n│           └── download.jsp\n└── pom.xml\n```\n\n## 二、完整实现代码\n\n### 1. 前端页面 (index.html)\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>文件上传下载系统</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            padding: 20px;\n            color: #333;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 40px;\n            color: white;\n        }\n        \n        h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n        }\n        \n        .subtitle {\n            font-size: 1.2rem;\n            opacity: 0.9;\n        }\n        \n        .card-container {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 30px;\n            margin-bottom: 30px;\n        }\n        \n        @media (max-width: 768px) {\n            .card-container {\n                grid-template-columns: 1fr;\n            }\n        }\n        \n        .card {\n            background: white;\n            border-radius: 15px;\n            padding: 30px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n            transition: transform 0.3s ease;\n        }\n        \n        .card:hover {\n            transform: translateY(-5px);\n        }\n        \n        h2 {\n            color: #4a5568;\n            margin-bottom: 20px;\n            padding-bottom: 10px;\n            border-bottom: 2px solid #e2e8f0;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .feature-list {\n            list-style: none;\n            margin: 20px 0;\n        }\n        \n        .feature-item {\n            padding: 10px 0;\n            border-bottom: 1px solid #f1f1f1;\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .feature-item:before {\n            content: \"✓\";\n            color: #48bb78;\n            font-weight: bold;\n        }\n        \n        .btn {\n            display: inline-block;\n            padding: 12px 30px;\n            background: #667eea;\n            color: white;\n            text-decoration: none;\n            border-radius: 8px;\n            font-weight: 600;\n            transition: all 0.3s;\n            border: none;\n            cursor: pointer;\n            text-align: center;\n        }\n        \n        .btn:hover {\n            background: #5a6fd8;\n            transform: translateY(-2px);\n        }\n        \n        .btn-download {\n            background: #48bb78;\n        }\n        \n        .btn-download:hover {\n            background: #38a169;\n        }\n        \n        .upload-form {\n            display: flex;\n            flex-direction: column;\n            gap: 15px;\n        }\n        \n        .form-group {\n            display: flex;\n            flex-direction: column;\n            gap: 5px;\n        }\n        \n        label {\n            font-weight: 600;\n            color: #4a5568;\n        }\n        \n        input[type=\"file\"] {\n            padding: 10px;\n            border: 2px dashed #cbd5e0;\n            border-radius: 8px;\n            background: #f7fafc;\n        }\n        \n        input[type=\"text\"] {\n            padding: 12px;\n            border: 2px solid #e2e8f0;\n            border-radius: 8px;\n            font-size: 1rem;\n        }\n        \n        .file-list {\n            margin-top: 20px;\n        }\n        \n        .file-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 12px 15px;\n            background: #f7fafc;\n            border-radius: 8px;\n            margin-bottom: 10px;\n        }\n        \n        .file-info {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .file-icon {\n            font-size: 1.5rem;\n        }\n        \n        .file-name {\n            font-weight: 500;\n        }\n        \n        .file-size {\n            color: #718096;\n            font-size: 0.9rem;\n        }\n        \n        .status-message {\n            padding: 15px;\n            border-radius: 8px;\n            margin: 15px 0;\n            text-align: center;\n            display: none;\n        }\n        \n        .status-success {\n            background: #f0fff4;\n            color: #38a169;\n            border: 1px solid #c6f6d5;\n        }\n        \n        .status-error {\n            background: #fed7d7;\n            color: #e53e3e;\n            border: 1px solid #feb2b2;\n        }\n        \n        .tech-info {\n            background: white;\n            border-radius: 15px;\n            padding: 30px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n            margin-top: 30px;\n        }\n        \n        .tech-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-top: 20px;\n        }\n        \n        .tech-card {\n            background: #f7fafc;\n            padding: 20px;\n            border-radius: 10px;\n            border-left: 4px solid #667eea;\n        }\n        \n        .tech-title {\n            font-weight: 600;\n            margin-bottom: 10px;\n            color: #4a5568;\n        }\n        \n        .progress-bar {\n            width: 100%;\n            height: 6px;\n            background: #e2e8f0;\n            border-radius: 3px;\n            margin: 10px 0;\n            overflow: hidden;\n            display: none;\n        }\n        \n        .progress {\n            height: 100%;\n            background: #48bb78;\n            width: 0%;\n            transition: width 0.3s;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>文件上传下载系统</h1>\n            <p class=\"subtitle\">基于 Commons IO 和 Commons FileUpload 实现</p>\n        </header>\n        \n        <div class=\"card-container\">\n            <div class=\"card\">\n                <h2>📤 文件上传</h2>\n                <form class=\"upload-form\" id=\"uploadForm\" enctype=\"multipart/form-data\">\n                    <div class=\"form-group\">\n                        <label for=\"file\">选择文件</label>\n                        <input type=\"file\" id=\"file\" name=\"file\" multiple required>\n                    </div>\n                    \n                    <div class=\"form-group\">\n                        <label for=\"description\">文件描述（可选）</label>\n                        <input type=\"text\" id=\"description\" name=\"description\" placeholder=\"输入文件描述...\">\n                    </div>\n                    \n                    <button type=\"submit\" class=\"btn\">上传文件</button>\n                </form>\n                \n                <div class=\"progress-bar\" id=\"progressBar\">\n                    <div class=\"progress\" id=\"progress\"></div>\n                </div>\n                \n                <div id=\"uploadStatus\" class=\"status-message\"></div>\n            </div>\n            \n            <div class=\"card\">\n                <h2>📥 文件下载</h2>\n                <p>选择要下载的文件：</p>\n                \n                <div class=\"file-list\" id=\"fileList\">\n                    <!-- 文件列表将通过JavaScript动态加载 -->\n                    <div class=\"file-item\">\n                        <div class=\"file-info\">\n                            <span class=\"file-icon\">📄</span>\n                            <div>\n                                <div class=\"file-name\">示例文件.txt</div>\n                                <div class=\"file-size\">2.5 KB</div>\n                            </div>\n                        </div>\n                        <a href=\"#\" class=\"btn btn-download\">下载</a>\n                    </div>\n                </div>\n                \n                <div id=\"downloadStatus\" class=\"status-message\"></div>\n            </div>\n        </div>\n        \n        <div class=\"tech-info\">\n            <h2>🛠 技术实现详情</h2>\n            <div class=\"tech-grid\">\n                <div class=\"tech-card\">\n                    <div class=\"tech-title\">Commons FileUpload</div>\n                    <ul class=\"feature-list\">\n                        <li class=\"feature-item\">处理 multipart/form-data 请求</li>\n                        <li class=\"feature-item\">支持大文件上传</li>\n                        <li class=\"feature-item\">内存和磁盘存储管理</li>\n                        <li class=\"feature-item\">文件大小限制控制</li>\n                    </ul>\n                </div>\n                \n                <div class=\"tech-card\">\n                    <div class=\"tech-title\">Commons IO</div>\n                    <ul class=\"feature-list\">\n                        <li class=\"feature-item\">简化文件操作</li>\n                        <li class=\"feature-item\">流复制和关闭</li>\n                        <li class=\"feature-item\">文件大小计算</li>\n                        <li class=\"feature-item\">文件名处理</li>\n                    </ul>\n                </div>\n                \n                <div class=\"tech-card\">\n                    <div class=\"tech-title\">核心特性</div>\n                    <ul class=\"feature-list\">\n                        <li class=\"feature-item\">多文件同时上传</li>\n                        <li class=\"feature-item\">上传进度显示</li>\n                        <li class=\"feature-item\">文件类型验证</li>\n                        <li class=\"feature-item\">安全下载</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // 文件上传处理\n        document.getElementById('uploadForm').addEventListener('submit', function(e) {\n            e.preventDefault();\n            \n            const formData = new FormData(this);\n            const progressBar = document.getElementById('progressBar');\n            const progress = document.getElementById('progress');\n            const status = document.getElementById('uploadStatus');\n            \n            // 显示进度条\n            progressBar.style.display = 'block';\n            progress.style.width = '0%';\n            \n            const xhr = new XMLHttpRequest();\n            \n            // 上传进度事件\n            xhr.upload.addEventListener('progress', function(e) {\n                if (e.lengthComputable) {\n                    const percentComplete = (e.loaded / e.total) * 100;\n                    progress.style.width = percentComplete + '%';\n                }\n            });\n            \n            // 请求完成\n            xhr.addEventListener('load', function() {\n                progressBar.style.display = 'none';\n                \n                if (xhr.status === 200) {\n                    const response = JSON.parse(xhr.responseText);\n                    if (response.success) {\n                        showMessage(status, '文件上传成功！', 'success');\n                        document.getElementById('uploadForm').reset();\n                        loadFileList(); // 刷新文件列表\n                    } else {\n                        showMessage(status, response.message || '上传失败', 'error');\n                    }\n                } else {\n                    showMessage(status, '上传失败，服务器错误', 'error');\n                }\n            });\n            \n            // 请求错误\n            xhr.addEventListener('error', function() {\n                progressBar.style.display = 'none';\n                showMessage(status, '上传失败，网络错误', 'error');\n            });\n            \n            xhr.open('POST', '/upload');\n            xhr.send(formData);\n        });\n        \n        // 显示状态消息\n        function showMessage(element, message, type) {\n            element.textContent = message;\n            element.className = `status-message status-${type}`;\n            element.style.display = 'block';\n            \n            setTimeout(() => {\n                element.style.display = 'none';\n            }, 5000);\n        }\n        \n        // 加载文件列表\n        function loadFileList() {\n            // 模拟从服务器获取文件列表\n            const fileList = [\n                { name: 'document.pdf', size: '2.3 MB', url: '/download?file=document.pdf' },\n                { name: 'image.jpg', size: '1.5 MB', url: '/download?file=image.jpg' },\n                { name: 'data.xlsx', size: '456 KB', url: '/download?file=data.xlsx' }\n            ];\n            \n            const fileListContainer = document.getElementById('fileList');\n            fileListContainer.innerHTML = '';\n            \n            fileList.forEach(file => {\n                const fileItem = document.createElement('div');\n                fileItem.className = 'file-item';\n                fileItem.innerHTML = `\n                    <div class=\"file-info\">\n                        <span class=\"file-icon\">${getFileIcon(file.name)}</span>\n                        <div>\n                            <div class=\"file-name\">${file.name}</div>\n                            <div class=\"file-size\">${file.size}</div>\n                        </div>\n                    </div>\n                    <a href=\"${file.url}\" class=\"btn btn-download\">下载</a>\n                `;\n                fileListContainer.appendChild(fileItem);\n            });\n        }\n        \n        // 根据文件名获取图标\n        function getFileIcon(filename) {\n            const ext = filename.split('.').pop().toLowerCase();\n            const icons = {\n                'pdf': '📕',\n                'jpg': '🖼️',\n                'jpeg': '🖼️',\n                'png': '🖼️',\n                'gif': '🖼️',\n                'doc': '📄',\n                'docx': '📄',\n                'xls': '📊',\n                'xlsx': '📊',\n                'zip': '📦',\n                'rar': '📦',\n                'txt': '📝',\n                'mp4': '🎬',\n                'mp3': '🎵'\n            };\n            return icons[ext] || '📄';\n        }\n        \n        // 页面加载时初始化\n        document.addEventListener('DOMContentLoaded', function() {\n            loadFileList();\n        });\n    </script>\n</body>\n</html>\n```\n\n### 2. 文件上传 Servlet (FileUploadServlet.java)\n```java\npackage com.example.servlet;\n\nimport org.apache.commons.fileupload.FileItem;\nimport org.apache.commons.fileupload.FileUploadException;\nimport org.apache.commons.fileupload.disk.DiskFileItemFactory;\nimport org.apache.commons.fileupload.servlet.ServletFileUpload;\nimport org.apache.commons.io.FilenameUtils;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.List;\nimport java.util.UUID;\n\n@WebServlet(\"/upload\")\npublic class FileUploadServlet extends HttpServlet {\n    \n    // 上传配置\n    private static final long MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n    private static final long MAX_REQUEST_SIZE = 20 * 1024 * 1024; // 20MB\n    private static final String UPLOAD_DIRECTORY = \"uploads\";\n    \n    // 允许的文件类型\n    private static final String[] ALLOWED_EXTENSIONS = {\n        \"txt\", \"pdf\", \"doc\", \"docx\", \"xls\", \"xlsx\", \"jpg\", \"jpeg\", \"png\", \"gif\"\n    };\n    \n    @Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        \n        response.setContentType(\"application/json\");\n        response.setCharacterEncoding(\"UTF-8\");\n        PrintWriter out = response.getWriter();\n        \n        // 检查请求是否包含文件上传\n        if (!ServletFileUpload.isMultipartContent(request)) {\n            sendErrorResponse(out, \"请求必须包含文件上传\");\n            return;\n        }\n        \n        // 配置上传参数\n        DiskFileItemFactory factory = new DiskFileItemFactory();\n        \n        // 设置内存存储阈值 - 超过后将产生临时文件并存储于临时目录中\n        factory.setSizeThreshold(1024 * 1024); // 1MB\n        \n        // 设置临时存储目录\n        File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n        factory.setRepository(tempDir);\n        \n        ServletFileUpload upload = new ServletFileUpload(factory);\n        \n        // 设置最大文件上传值\n        upload.setFileSizeMax(MAX_FILE_SIZE);\n        \n        // 设置最大请求值（包含文件和表单数据）\n        upload.setSizeMax(MAX_REQUEST_SIZE);\n        \n        // 构造临时路径来存储上传的文件\n        String uploadPath = getServletContext().getRealPath(\"\") + File.separator + UPLOAD_DIRECTORY;\n        \n        // 如果目录不存在则创建\n        File uploadDir = new File(uploadPath);\n        if (!uploadDir.exists()) {\n            uploadDir.mkdirs();\n        }\n        \n        try {\n            // 解析请求的内容提取文件数据\n            List<FileItem> formItems = upload.parseRequest(request);\n            \n            if (formItems != null && formItems.size() > 0) {\n                String description = null;\n                String fileName = null;\n                \n                // 迭代表单数据\n                for (FileItem item : formItems) {\n                    if (item.isFormField()) {\n                        // 处理普通表单字段\n                        String fieldName = item.getFieldName();\n                        String fieldValue = item.getString(\"UTF-8\");\n                        \n                        if (\"description\".equals(fieldName)) {\n                            description = fieldValue;\n                        }\n                    } else {\n                        // 处理上传文件\n                        String originalFileName = new File(item.getName()).getName();\n                        \n                        if (originalFileName != null && !originalFileName.isEmpty()) {\n                            // 验证文件类型\n                            if (!isAllowedFileType(originalFileName)) {\n                                sendErrorResponse(out, \"不支持的文件类型: \" + originalFileName);\n                                return;\n                            }\n                            \n                            // 生成唯一文件名防止覆盖\n                            String fileExtension = FilenameUtils.getExtension(originalFileName);\n                            String uniqueFileName = UUID.randomUUID().toString() + \".\" + fileExtension;\n                            \n                            fileName = uniqueFileName;\n                            String filePath = uploadPath + File.separator + uniqueFileName;\n                            File storeFile = new File(filePath);\n                            \n                            // 保存文件到磁盘\n                            item.write(storeFile);\n                            \n                            // 记录文件信息到数据库或文件（这里简化为打印日志）\n                            System.out.println(\"文件上传成功: \" + originalFileName + \n                                \" -> \" + uniqueFileName + \n                                \"，描述: \" + description);\n                        }\n                    }\n                }\n                \n                // 返回成功响应\n                out.print(\"{\\\"success\\\": true, \\\"message\\\": \\\"文件上传成功\\\", \\\"fileName\\\": \\\"\" + fileName + \"\\\"}\");\n            } else {\n                sendErrorResponse(out, \"没有找到上传的文件\");\n            }\n        } catch (FileUploadException e) {\n            sendErrorResponse(out, \"文件上传失败: \" + e.getMessage());\n        } catch (Exception e) {\n            sendErrorResponse(out, \"服务器错误: \" + e.getMessage());\n        }\n    }\n    \n    // 验证文件类型是否允许\n    private boolean isAllowedFileType(String fileName) {\n        String extension = FilenameUtils.getExtension(fileName).toLowerCase();\n        for (String allowedExt : ALLOWED_EXTENSIONS) {\n            if (allowedExt.equals(extension)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    // 发送错误响应\n    private void sendErrorResponse(PrintWriter out, String message) {\n        out.print(\"{\\\"success\\\": false, \\\"message\\\": \\\"\" + message + \"\\\"}\");\n    }\n}\n```\n\n### 3. 文件下载 Servlet (FileDownloadServlet.java)\n```java\npackage com.example.servlet;\n\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.IOUtils;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\n@WebServlet(\"/download\")\npublic class FileDownloadServlet extends HttpServlet {\n    \n    private static final String UPLOAD_DIRECTORY = \"uploads\";\n    \n    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        \n        String fileName = request.getParameter(\"file\");\n        \n        if (fileName == null || fileName.isEmpty()) {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"文件名不能为空\");\n            return;\n        }\n        \n        // 安全验证：防止路径遍历攻击\n        if (fileName.contains(\"..\") || fileName.contains(\"/\") || fileName.contains(\"\\\\\")) {\n            response.sendError(HttpServletResponse.SC_BAD_REQUEST, \"无效的文件名\");\n            return;\n        }\n        \n        String uploadPath = getServletContext().getRealPath(\"\") + File.separator + UPLOAD_DIRECTORY;\n        File file = new File(uploadPath + File.separator + fileName);\n        \n        // 检查文件是否存在\n        if (!file.exists()) {\n            response.sendError(HttpServletResponse.SC_NOT_FOUND, \"文件不存在: \" + fileName);\n            return;\n        }\n        \n        // 设置响应头\n        String mimeType = getServletContext().getMimeType(file.getAbsolutePath());\n        if (mimeType == null) {\n            mimeType = \"application/octet-stream\";\n        }\n        \n        response.setContentType(mimeType);\n        response.setContentLength((int) file.length());\n        \n        // 设置下载头信息\n        String encodedFileName = URLEncoder.encode(fileName, StandardCharsets.UTF_8.toString())\n                .replaceAll(\"\\\\+\", \"%20\");\n        String disposition = \"attachment; filename=\\\"\" + encodedFileName + \"\\\"\";\n        response.setHeader(\"Content-Disposition\", disposition);\n        \n        // 使用Commons IO进行文件流复制\n        try (FileInputStream inputStream = new FileInputStream(file);\n             OutputStream outputStream = response.getOutputStream()) {\n            \n            IOUtils.copy(inputStream, outputStream);\n            outputStream.flush();\n            \n            // 记录下载日志\n            System.out.println(\"文件下载成功: \" + fileName + \n                \"，IP: \" + request.getRemoteAddr());\n                \n        } catch (IOException e) {\n            System.err.println(\"文件下载失败: \" + fileName + \" - \" + e.getMessage());\n            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"文件下载失败\");\n        }\n    }\n}\n```\n\n### 4. 文件工具类 (FileUtil.java)\n```java\npackage com.example.util;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.FilenameUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FileUtil {\n    \n    /**\n     * 获取上传目录中的所有文件信息\n     */\n    public static List<FileInfo> getUploadedFiles(String uploadPath) throws IOException {\n        List<FileInfo> fileList = new ArrayList<>();\n        \n        File uploadDir = new File(uploadPath);\n        if (!uploadDir.exists() || !uploadDir.isDirectory()) {\n            return fileList;\n        }\n        \n        File[] files = uploadDir.listFiles();\n        if (files != null) {\n            for (File file : files) {\n                if (file.isFile()) {\n                    FileInfo fileInfo = new FileInfo();\n                    fileInfo.setName(file.getName());\n                    fileInfo.setSize(FileUtils.byteCountToDisplaySize(file.length()));\n                    fileInfo.setPath(file.getAbsolutePath());\n                    fileInfo.setExtension(FilenameUtils.getExtension(file.getName()));\n                    fileInfo.setLastModified(file.lastModified());\n                    fileList.add(fileInfo);\n                }\n            }\n        }\n        \n        return fileList;\n    }\n    \n    /**\n     * 删除上传的文件\n     */\n    public static boolean deleteFile(String filePath) {\n        try {\n            File file = new File(filePath);\n            return FileUtils.deleteQuietly(file);\n        } catch (Exception e) {\n            System.err.println(\"删除文件失败: \" + filePath + \" - \" + e.getMessage());\n            return false;\n        }\n    }\n    \n    /**\n     * 获取文件大小（人类可读格式）\n     */\n    public static String getHumanReadableSize(File file) {\n        return FileUtils.byteCountToDisplaySize(file.length());\n    }\n    \n    /**\n     * 清理临时文件\n     */\n    public static void cleanupTempFiles(String tempDirPath, long maxAgeMillis) {\n        File tempDir = new File(tempDirPath);\n        if (!tempDir.exists()) {\n            return;\n        }\n        \n        File[] tempFiles = tempDir.listFiles();\n        if (tempFiles != null) {\n            long currentTime = System.currentTimeMillis();\n            for (File tempFile : tempFiles) {\n                if (currentTime - tempFile.lastModified() > maxAgeMillis) {\n                    FileUtils.deleteQuietly(tempFile);\n                }\n            }\n        }\n    }\n    \n    /**\n     * 文件信息类\n     */\n    public static class FileInfo {\n        private String name;\n        private String size;\n        private String path;\n        private String extension;\n        private long lastModified;\n        \n        // getters and setters\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        \n        public String getSize() { return size; }\n        public void setSize(String size) { this.size = size; }\n        \n        public String getPath() { return path; }\n        public void setPath(String path) { this.path = path; }\n        \n        public String getExtension() { return extension; }\n        public void setExtension(String extension) { this.extension = extension; }\n        \n        public long getLastModified() { return lastModified; }\n        public void setLastModified(long lastModified) { this.lastModified = lastModified; }\n    }\n}\n```\n\n### 5. Web 配置 (web.xml)\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<web-app xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n                             http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n    \n    <display-name>File Upload Download System</display-name>\n    \n    <!-- 文件上传配置 -->\n    <servlet>\n        <servlet-name>FileUploadServlet</servlet-name>\n        <servlet-class>com.example.servlet.FileUploadServlet</servlet-class>\n        <multipart-config>\n            <max-file-size>10485760</max-file-size>      <!-- 10MB -->\n            <max-request-size>20971520</max-request-size> <!-- 20MB -->\n            <file-size-threshold>1048576</file-size-threshold> <!-- 1MB -->\n        </multipart-config>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>FileUploadServlet</servlet-name>\n        <url-pattern>/upload</url-pattern>\n    </servlet-mapping>\n    \n    <!-- 文件下载配置 -->\n    <servlet>\n        <servlet-name>FileDownloadServlet</servlet-name>\n        <servlet-class>com.example.servlet.FileDownloadServlet</servlet-class>\n    </servlet>\n    \n    <servlet-mapping>\n        <servlet-name>FileDownloadServlet</servlet-name>\n        <url-pattern>/download</url-pattern>\n    </servlet-mapping>\n    \n    <!-- 欢迎页面 -->\n    <welcome-file-list>\n        <welcome-file>index.html</welcome-file>\n    </welcome-file-list>\n    \n</web-app>\n```\n\n## 三、核心特性说明\n\n### Commons FileUpload 主要功能：\n1. **Multipart 请求解析** - 自动解析 multipart/form-data 格式\n2. **内存管理** - 智能管理内存和磁盘存储\n3. **大小限制** - 支持文件大小和请求大小限制\n4. **进度监听** - 可监听上传进度（需要额外配置）\n\n### Commons IO 主要功能：\n1. **流操作** - 简化的流复制和关闭操作\n2. **文件工具** - 文件大小计算、类型判断等\n3. **文件名处理** - 安全的文件名和路径操作\n4. **工具方法** - 提供各种文件操作的工具方法\n\n## 四、安全考虑\n\n1. **文件类型验证** - 限制可上传的文件类型\n2. **文件名安全** - 防止路径遍历攻击\n3. **大小限制** - 防止超大文件上传\n4. **病毒扫描** - 生产环境应集成病毒扫描\n\n这个完整的实现展示了如何使用 Commons IO 和 Commons FileUpload 来构建一个功能完善的文件上传下载系统！","categories":["Web开发"]},{"title":"AJAX 复习指南","url":"/2025/10/15/AJAX 复习指南/","content":"## 一、AJAX 概述与作用\n\nAJAX（Asynchronous JavaScript and XML）是一种创建快速动态网页的技术，通过在后台与服务器进行少量数据交换，使网页实现异步更新。\n\n**核心作用：**\n\n- 异步数据交换\n- 局部页面更新\n- 提升用户体验\n- 减少服务器负载\n\n## 二、应用场景\n\n1. **表单验证** - 实时验证用户输入\n2. **搜索建议** - 动态搜索提示\n3. **无限滚动** - 滚动加载更多内容\n4. **实时更新** - 聊天应用、股票行情\n5. **购物车更新** - 无需刷新页面更新购物车\n\n## 三、实际问题演示\n\n下面通过一个完整的实时天气应用来展示 AJAX 的作用：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AJAX 实时天气应用</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);\n            min-height: 100vh;\n            padding: 20px;\n            color: #333;\n        }\n        \n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            color: white;\n        }\n        \n        h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n        }\n        \n        .subtitle {\n            font-size: 1.2rem;\n            opacity: 0.9;\n        }\n        \n        .search-container {\n            background: white;\n            border-radius: 15px;\n            padding: 20px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n            margin-bottom: 30px;\n        }\n        \n        .search-box {\n            display: flex;\n            gap: 10px;\n        }\n        \n        .search-input {\n            flex: 1;\n            padding: 15px;\n            border: 2px solid #ddd;\n            border-radius: 10px;\n            font-size: 1rem;\n            transition: border-color 0.3s;\n        }\n        \n        .search-input:focus {\n            outline: none;\n            border-color: #74b9ff;\n        }\n        \n        .search-btn {\n            padding: 15px 25px;\n            background: #74b9ff;\n            color: white;\n            border: none;\n            border-radius: 10px;\n            cursor: pointer;\n            font-size: 1rem;\n            transition: background 0.3s;\n        }\n        \n        .search-btn:hover {\n            background: #0984e3;\n        }\n        \n        .weather-display {\n            background: white;\n            border-radius: 15px;\n            padding: 30px;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);\n            display: none;\n        }\n        \n        .current-weather {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 30px;\n            padding-bottom: 20px;\n            border-bottom: 2px solid #f1f1f1;\n        }\n        \n        .weather-info h2 {\n            font-size: 1.8rem;\n            margin-bottom: 10px;\n            color: #2d3436;\n        }\n        \n        .temperature {\n            font-size: 4rem;\n            font-weight: bold;\n            color: #0984e3;\n        }\n        \n        .weather-icon {\n            font-size: 5rem;\n        }\n        \n        .weather-details {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .detail-card {\n            background: #f8f9fa;\n            padding: 20px;\n            border-radius: 10px;\n            text-align: center;\n        }\n        \n        .detail-label {\n            font-size: 0.9rem;\n            color: #636e72;\n            margin-bottom: 5px;\n        }\n        \n        .detail-value {\n            font-size: 1.5rem;\n            font-weight: bold;\n            color: #2d3436;\n        }\n        \n        .forecast {\n            margin-top: 20px;\n        }\n        \n        .forecast-title {\n            font-size: 1.5rem;\n            margin-bottom: 15px;\n            color: #2d3436;\n        }\n        \n        .forecast-list {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n            gap: 15px;\n        }\n        \n        .forecast-item {\n            background: #f8f9fa;\n            padding: 15px;\n            border-radius: 10px;\n            text-align: center;\n        }\n        \n        .forecast-day {\n            font-weight: bold;\n            margin-bottom: 5px;\n        }\n        \n        .forecast-temp {\n            font-size: 1.2rem;\n            color: #0984e3;\n        }\n        \n        .loading {\n            text-align: center;\n            padding: 30px;\n            display: none;\n        }\n        \n        .spinner {\n            border: 5px solid #f3f3f3;\n            border-top: 5px solid #74b9ff;\n            border-radius: 50%;\n            width: 50px;\n            height: 50px;\n            animation: spin 1s linear infinite;\n            margin: 0 auto 20px;\n        }\n        \n        @keyframes spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n        }\n        \n        .error-message {\n            background: #ff7675;\n            color: white;\n            padding: 15px;\n            border-radius: 10px;\n            text-align: center;\n            margin-bottom: 20px;\n            display: none;\n        }\n        \n        .recent-searches {\n            margin-top: 20px;\n        }\n        \n        .recent-title {\n            font-size: 1rem;\n            margin-bottom: 10px;\n            color: #636e72;\n        }\n        \n        .recent-list {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n        \n        .recent-item {\n            background: #e3f2fd;\n            padding: 8px 15px;\n            border-radius: 20px;\n            cursor: pointer;\n            font-size: 0.9rem;\n            transition: background 0.3s;\n        }\n        \n        .recent-item:hover {\n            background: #bbdefb;\n        }\n        \n        @media (max-width: 600px) {\n            .current-weather {\n                flex-direction: column;\n                text-align: center;\n                gap: 20px;\n            }\n            \n            .temperature {\n                font-size: 3rem;\n            }\n            \n            .weather-icon {\n                font-size: 4rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>AJAX 实时天气应用</h1>\n            <p class=\"subtitle\">使用 AJAX 技术获取实时天气数据</p>\n        </header>\n        \n        <div class=\"search-container\">\n            <div class=\"search-box\">\n                <input type=\"text\" class=\"search-input\" placeholder=\"输入城市名称，如：北京、上海、纽约...\" id=\"city-input\">\n                <button class=\"search-btn\" id=\"search-btn\">搜索天气</button>\n            </div>\n            <div class=\"recent-searches\">\n                <div class=\"recent-title\">最近搜索：</div>\n                <div class=\"recent-list\" id=\"recent-list\">\n                    <!-- 最近搜索的城市将通过JavaScript动态添加 -->\n                </div>\n            </div>\n        </div>\n        \n        <div class=\"error-message\" id=\"error-message\">\n            无法获取天气数据，请检查城市名称是否正确或稍后重试。\n        </div>\n        \n        <div class=\"loading\" id=\"loading\">\n            <div class=\"spinner\"></div>\n            <p>正在获取天气数据...</p>\n        </div>\n        \n        <div class=\"weather-display\" id=\"weather-display\">\n            <div class=\"current-weather\">\n                <div class=\"weather-info\">\n                    <h2 id=\"city-name\">北京市</h2>\n                    <div class=\"temperature\" id=\"current-temp\">25°C</div>\n                    <div id=\"weather-desc\">晴朗</div>\n                </div>\n                <div class=\"weather-icon\" id=\"weather-icon\">☀️</div>\n            </div>\n            \n            <div class=\"weather-details\">\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">体感温度</div>\n                    <div class=\"detail-value\" id=\"feels-like\">26°C</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">湿度</div>\n                    <div class=\"detail-value\" id=\"humidity\">65%</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">风速</div>\n                    <div class=\"detail-value\" id=\"wind-speed\">3.6 m/s</div>\n                </div>\n                <div class=\"detail-card\">\n                    <div class=\"detail-label\">气压</div>\n                    <div class=\"detail-value\" id=\"pressure\">1015 hPa</div>\n                </div>\n            </div>\n            \n            <div class=\"forecast\">\n                <h3 class=\"forecast-title\">未来5天预报</h3>\n                <div class=\"forecast-list\" id=\"forecast-list\">\n                    <!-- 天气预报将通过JavaScript动态添加 -->\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // 模拟天气API响应数据\n        const mockWeatherData = {\n            '北京': {\n                current: {\n                    temp: 25,\n                    feels_like: 26,\n                    humidity: 65,\n                    wind_speed: 3.6,\n                    pressure: 1015,\n                    weather: [{ description: '晴朗', main: 'Clear' }]\n                },\n                daily: [\n                    { dt: Date.now()/1000, temp: { day: 26 }, weather: [{ main: 'Clear' }] },\n                    { dt: Date.now()/1000 + 86400, temp: { day: 24 }, weather: [{ main: 'Clouds' }] },\n                    { dt: Date.now()/1000 + 172800, temp: { day: 23 }, weather: [{ main: 'Rain' }] },\n                    { dt: Date.now()/1000 + 259200, temp: { day: 22 }, weather: [{ main: 'Rain' }] },\n                    { dt: Date.now()/1000 + 345600, temp: { day: 25 }, weather: [{ main: 'Clear' }] }\n                ]\n            },\n            '上海': {\n                current: {\n                    temp: 28,\n                    feels_like: 30,\n                    humidity: 75,\n                    wind_speed: 4.2,\n                    pressure: 1012,\n                    weather: [{ description: '多云', main: 'Clouds' }]\n                },\n                daily: [\n                    { dt: Date.now()/1000, temp: { day: 28 }, weather: [{ main: 'Clouds' }] },\n                    { dt: Date.now()/1000 + 86400, temp: { day: 27 }, weather: [{ main: 'Rain' }] },\n                    { dt: Date.now()/1000 + 172800, temp: { day: 26 }, weather: [{ main: 'Rain' }] },\n                    { dt: Date.now()/1000 + 259200, temp: { day: 29 }, weather: [{ main: 'Clear' }] },\n                    { dt: Date.now()/1000 + 345600, temp: { day: 30 }, weather: [{ main: 'Clear' }] }\n                ]\n            },\n            '纽约': {\n                current: {\n                    temp: 18,\n                    feels_like: 17,\n                    humidity: 60,\n                    wind_speed: 5.1,\n                    pressure: 1018,\n                    weather: [{ description: '小雨', main: 'Rain' }]\n                },\n                daily: [\n                    { dt: Date.now()/1000, temp: { day: 18 }, weather: [{ main: 'Rain' }] },\n                    { dt: Date.now()/1000 + 86400, temp: { day: 20 }, weather: [{ main: 'Clouds' }] },\n                    { dt: Date.now()/1000 + 172800, temp: { day: 22 }, weather: [{ main: 'Clear' }] },\n                    { dt: Date.now()/1000 + 259200, temp: { day: 21 }, weather: [{ main: 'Clear' }] },\n                    { dt: Date.now()/1000 + 345600, temp: { day: 19 }, weather: [{ main: 'Clouds' }] }\n                ]\n            }\n        };\n\n        // 存储最近搜索的城市\n        let recentSearches = JSON.parse(localStorage.getItem('recentSearches')) || ['北京', '上海', '纽约'];\n        \n        // 天气图标映射\n        const weatherIcons = {\n            'Clear': '☀️',\n            'Clouds': '☁️',\n            'Rain': '🌧️',\n            'Drizzle': '🌦️',\n            'Thunderstorm': '⛈️',\n            'Snow': '❄️',\n            'Mist': '🌫️'\n        };\n\n        // 文档就绪后执行\n        $(document).ready(function() {\n            // 初始化最近搜索列表\n            updateRecentSearches();\n            \n            // 绑定搜索按钮点击事件\n            $('#search-btn').on('click', function() {\n                const city = $('#city-input').val().trim();\n                if (city) {\n                    getWeatherData(city);\n                }\n            });\n            \n            // 绑定输入框回车事件\n            $('#city-input').on('keypress', function(e) {\n                if (e.which === 13) { // 回车键\n                    const city = $(this).val().trim();\n                    if (city) {\n                        getWeatherData(city);\n                    }\n                }\n            });\n            \n            // 默认加载北京天气\n            getWeatherData('北京');\n        });\n\n        // 获取天气数据 - 模拟AJAX请求\n        function getWeatherData(city) {\n            // 显示加载中\n            showLoading();\n            \n            // 模拟网络延迟\n            setTimeout(function() {\n                // 模拟AJAX成功/失败响应\n                if (mockWeatherData[city]) {\n                    // 模拟成功响应\n                    displayWeatherData(city, mockWeatherData[city]);\n                    addToRecentSearches(city);\n                } else {\n                    // 模拟失败响应\n                    showError();\n                }\n                \n                // 隐藏加载中\n                hideLoading();\n            }, 1000);\n        }\n\n        // 显示加载状态\n        function showLoading() {\n            $('#loading').show();\n            $('#weather-display').hide();\n            $('#error-message').hide();\n        }\n\n        // 隐藏加载状态\n        function hideLoading() {\n            $('#loading').hide();\n        }\n\n        // 显示错误信息\n        function showError() {\n            $('#error-message').show();\n            $('#weather-display').hide();\n        }\n\n        // 显示天气数据\n        function displayWeatherData(city, data) {\n            const current = data.current;\n            const daily = data.daily;\n            \n            // 更新当前天气信息\n            $('#city-name').text(city);\n            $('#current-temp').text(`${Math.round(current.temp)}°C`);\n            $('#weather-desc').text(current.weather[0].description);\n            $('#weather-icon').text(weatherIcons[current.weather[0].main] || '🌤️');\n            \n            // 更新天气详情\n            $('#feels-like').text(`${Math.round(current.feels_like)}°C`);\n            $('#humidity').text(`${current.humidity}%`);\n            $('#wind-speed').text(`${current.wind_speed} m/s`);\n            $('#pressure').text(`${current.pressure} hPa`);\n            \n            // 更新天气预报\n            updateForecast(daily);\n            \n            // 显示天气信息\n            $('#weather-display').show();\n            $('#error-message').hide();\n        }\n\n        // 更新天气预报\n        function updateForecast(daily) {\n            const $forecastList = $('#forecast-list');\n            $forecastList.empty();\n            \n            const days = ['今天', '明天', '后天', '大后天', '大大后天'];\n            \n            // 只显示未来5天预报\n            for (let i = 0; i < 5; i++) {\n                const dayData = daily[i];\n                const dayName = days[i];\n                const temp = Math.round(dayData.temp.day);\n                const weatherMain = dayData.weather[0].main;\n                const icon = weatherIcons[weatherMain] || '🌤️';\n                \n                const $forecastItem = $('<div>').addClass('forecast-item');\n                $forecastItem.html(`\n                    <div class=\"forecast-day\">${dayName}</div>\n                    <div class=\"forecast-icon\">${icon}</div>\n                    <div class=\"forecast-temp\">${temp}°C</div>\n                `);\n                \n                $forecastList.append($forecastItem);\n            }\n        }\n\n        // 添加到最近搜索\n        function addToRecentSearches(city) {\n            // 如果城市已存在，先移除\n            recentSearches = recentSearches.filter(item => item !== city);\n            \n            // 添加到数组开头\n            recentSearches.unshift(city);\n            \n            // 只保留最近5个搜索\n            if (recentSearches.length > 5) {\n                recentSearches = recentSearches.slice(0, 5);\n            }\n            \n            // 保存到本地存储\n            localStorage.setItem('recentSearches', JSON.stringify(recentSearches));\n            \n            // 更新显示\n            updateRecentSearches();\n        }\n\n        // 更新最近搜索显示\n        function updateRecentSearches() {\n            const $recentList = $('#recent-list');\n            $recentList.empty();\n            \n            recentSearches.forEach(city => {\n                const $recentItem = $('<div>').addClass('recent-item');\n                $recentItem.text(city);\n                $recentItem.on('click', function() {\n                    $('#city-input').val(city);\n                    getWeatherData(city);\n                });\n                \n                $recentList.append($recentItem);\n            });\n        }\n\n        // 实际AJAX请求示例（注释掉，因为需要真实的API密钥）\n        /*\n        function realGetWeatherData(city) {\n            const apiKey = 'YOUR_API_KEY';\n            const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric&lang=zh_cn`;\n            \n            $.ajax({\n                url: url,\n                method: 'GET',\n                dataType: 'json',\n                beforeSend: function() {\n                    showLoading();\n                },\n                success: function(data) {\n                    displayWeatherData(city, data);\n                },\n                error: function(xhr, status, error) {\n                    console.error('AJAX请求失败:', error);\n                    showError();\n                },\n                complete: function() {\n                    hideLoading();\n                }\n            });\n        }\n        */\n    </script>\n</body>\n</html>\n```\n\n## 四、AJAX 核心优势总结\n\n通过上面的天气应用示例，我们可以看到 AJAX 的以下优势：\n\n1. **异步通信** - 不阻塞用户界面，提升用户体验\n2. **局部更新** - 只更新需要变化的部分，减少数据传输\n3. **实时交互** - 实现实时数据更新和交互\n4. **减少带宽** - 只传输必要数据，而非整个页面\n\n## 五、AJAX 工作原理\n\n1. **创建 XMLHttpRequest 对象**\n2. **配置请求参数**（方法、URL、异步等）\n3. **设置回调函数**处理响应\n4. **发送请求**\n5. **处理服务器响应**\n\n## 六、现代 AJAX 技术\n\n- **Fetch API** - 更现代的网络请求API\n- **Axios** - 流行的HTTP客户端库\n- **async/await** - 更优雅的异步处理方式\n\n## 七、实际应用中的注意事项\n\n1. **错误处理** - 网络错误、服务器错误等\n2. **加载状态** - 提供用户反馈\n3. **超时处理** - 设置合理的请求超时\n4. **安全性** - 防止CSRF等攻击\n\n这个示例展示了 AJAX 在实际应用中的强大功能，通过异步数据交换创建了流畅的用户体验！","categories":["Web开发"]},{"title":"Java Stream 流","url":"/2025/10/15/JavaStream流/","content":"\n好的，我们来系统地复习一下 Java Stream 流。这是一种在 Java 8 中引入的 API，用于以声明式方式处理数据集合（如 List、Set、Map 等）。它可以让你写出更简洁、更易读、更高效的代码。\n\n---\n\n### 第一部分：核心概念\n\n**1. 什么是 Stream？**\nStream（流）是一个来自数据源（如集合、数组）的元素队列，并支持聚合操作。它自己**不存储数据**，而是通过一个计算管道来处理数据。\n\n**2. 流的特点**\n*   **不是数据结构**：它本身不存储任何数据，数据来自其源（如集合）。\n*   **函数式风格**：对流的操作会产生一个结果，但不会修改其源。例如，对一个集合进行过滤，会生成一个新的流，而不是删除集合中的元素。\n*   **惰性执行**：许多流操作（如过滤、映射）可以是“惰性的”，这意味着它们只有在需要结果时才会执行。\n*   **只能遍历一次**：像迭代器一样，流在生命周期内只能被消费一次。一旦遍历结束，流就关闭了。如果你想再次操作，必须重新创建流。\n*   **可并行化**：流操作可以透明地利用多核架构，你只需要将 `stream()` 改为 `parallelStream()`，而逻辑代码无需改变。\n\n\n**3. 流的操作流程**\n流的操作分为两个阶段，连接起来形成一个“流管道”。\n1.  **中间操作**：返回一个新的流，可以连续多个。它们是惰性的，不立即执行。\n    *   例如：`filter()`, `map()`, `sorted()`, `distinct()`, `limit()`\n2.  **终端操作**：返回一个非流的结果（如 `void`、`List`、`Optional`、`Integer` 等）。它会触发整个流水线的实际执行。\n    *   例如：`forEach()`, `collect()`, `count()`, `reduce()`, `findFirst()`\n\n**流程示意图：**\n`数据源 -> (中间操作1 -> 中间操作2 -> ...) -> 终端操作 -> 结果`\n\n---\n\n### 第二部分：实际应用问题\n\n让我们通过一个具体的例子来应用这些概念。\n\n**问题场景：**\n我们有一个 `Employee`（员工）类，包含以下属性：`id`（编号）、`name`（姓名）、`age`（年龄）、`salary`（薪资）、`department`（部门）。\n我们有一个包含多个员工的 List。\n\n**目标：**\n1.  找出所有在“技术部”且年龄大于 25 岁的员工。\n2.  提取出这些员工的姓名。\n3.  将这些姓名按字母顺序排序。\n4.  将最终结果收集到一个新的 List 中。\n\n**传统方式（循环和条件判断）：**\n```java\nList<Employee> filteredList = new ArrayList<>();\nfor (Employee emp : employeeList) {\n    if (\"技术部\".equals(emp.getDepartment()) && emp.getAge() > 25) {\n        filteredList.add(emp);\n    }\n}\n\nList<String> nameList = new ArrayList<>();\nfor (Employee emp : filteredList) {\n    nameList.add(emp.getName());\n}\n\nCollections.sort(nameList);\n```\n\n**Stream 方式：**\n```java\nList<String> result = employeeList.stream() // 1. 创建流\n        .filter(emp -> \"技术部\".equals(emp.getDepartment())) // 2. 中间操作：过滤部门\n        .filter(emp -> emp.getAge() > 25) // 3. 中间操作：过滤年龄\n        .map(Employee::getName) // 4. 中间操作：将Employee对象映射为其姓名（String）\n        .sorted() // 5. 中间操作：对姓名进行自然排序\n        .collect(Collectors.toList()); // 6. 终端操作：将结果收集到List中\n```\n**stream流的流程图**\n\n```mermaid\ngraph TD;\n    A[Start] --> B[Create Stream from employeeList];\n    B --> C[Filter by Department: 技术部];\n    C --> D[Filter by Age > 25];\n    D --> E[Map to Names];\n    E --> F[Sort Names];\n    F --> G[Collect to nameList];\n    G --> H[End];\n```\n\n**代码分析：**\n*   `stream()`：从 `employeeList` 创建流。\n*   `filter(...)`：两个连续的过滤操作，是中间操作。它们会等待终端操作的触发。\n*   `map(Employee::getName)`：这是一个关键的中间操作。它将流中的 `Employee` 元素转换为 `String`（员工姓名）元素。现在流的类型从 `Stream<Employee>` 变成了 `Stream<String>`。\n*   `sorted()`：对 `Stream<String>` 中的字符串进行排序。\n*   `collect(Collectors.toList())`：这是终端操作。它触发了前面所有中间操作的执行，并将最终的 `Stream<String>` 收集到一个 `List<String>` 中。\n\n可以看到，Stream 代码更加**声明式**（“做什么”而不是“怎么做”），逻辑清晰，一气呵成，并且没有改变原始的 `employeeList`。\n\n---\n\n### 第三部分：常用的流使用方式\n\n这里列出一些最常用和强大的流操作组合。\n\n**1. 过滤与收集**\n```java\n// 找出所有薪资超过 10000 的员工\nList<Employee> wellPaid = employeeList.stream()\n        .filter(emp -> emp.getSalary() > 10000)\n        .collect(Collectors.toList());\n\n// 获取所有不同的部门\nSet<String> departments = employeeList.stream()\n        .map(Employee::getDepartment)\n        .collect(Collectors.toSet()); // 用Set自动去重\n```\n\n**2. 映射（提取信息或转换）**\n```java\n// 获取所有员工的姓名列表\nList<String> names = employeeList.stream()\n        .map(Employee::getName) // 方法引用，等价于 .map(emp -> emp.getName())\n        .collect(Collectors.toList());\n\n// 将每个员工的姓名转换为大写\nList<String> upperCaseNames = employeeList.stream()\n        .map(Employee::getName)\n        .map(String::toUpperCase)\n        .collect(Collectors.toList());\n```\n\n**3. 查找与匹配**\n```java\n// 检查是否有员工在“财务部”\nboolean hasFinance = employeeList.stream()\n        .anyMatch(emp -> \"财务部\".equals(emp.getDepartment()));\n\n// 检查是否所有员工都大于18岁\nboolean allAdult = employeeList.stream()\n        .allMatch(emp -> emp.getAge() >= 18);\n\n// 查找第一个在“人事部”的员工\nOptional<Employee> firstHr = employeeList.stream()\n        .filter(emp -> \"人事部\".equals(emp.getDepartment()))\n        .findFirst();\n// 使用Optional安全地处理结果\nfirstHr.ifPresent(emp -> System.out.println(emp.getName()));\n```\n\n**4. 归约与聚合**\n```java\n// 计算技术部员工的平均薪资\nOptionalDouble avgSalary = employeeList.stream()\n        .filter(emp -> \"技术部\".equals(emp.getDepartment()))\n        .mapToDouble(Employee::getSalary) // 转换为DoubleStream，有专门的统计方法\n        .average();\n\n// 计算公司总薪资支出\ndouble totalSalary = employeeList.stream()\n        .mapToDouble(Employee::getSalary)\n        .sum();\n\n// 找出薪资最高的员工\nOptional<Employee> topEarner = employeeList.stream()\n        .max(Comparator.comparingDouble(Employee::getSalary));\n```\n\n**5. 分组**\n```java\n// 按部门对员工进行分组\nMap<String, List<Employee>> byDept = employeeList.stream()\n        .collect(Collectors.groupingBy(Employee::getDepartment));\n\n// 按薪资范围分组（例如：<5000, 5000-10000, >10000）\nMap<String, List<Employee>> bySalaryRange = employeeList.stream()\n        .collect(Collectors.groupingBy(emp -> {\n            if (emp.getSalary() < 5000) return \"低\";\n            else if (emp.getSalary() <= 10000) return \"中\";\n            else return \"高\";\n        }));\n```\n\n**6. 链式操作的综合示例**\n```java\n// 统计技术部员工的数量\nlong count = employeeList.stream()\n        .filter(emp -> \"技术部\".equals(emp.getDepartment()))\n        .count();\n\n// 获取技术部员工姓名，按薪资降序排列的前3名\nList<String> topTechNames = employeeList.stream()\n        .filter(emp -> \"技术部\".equals(emp.getDepartment()))\n        .sorted(Comparator.comparingDouble(Employee::getSalary).reversed())\n        .limit(3)\n        .map(Employee::getName)\n        .collect(Collectors.toList());\n```\n\n### 总结\n\nJava Stream API 的核心在于 **声明式编程** 和 **函数式组合**。通过将多个简单的中间操作（`filter`, `map`, `sorted`）连接起来，最后以一个终端操作（`collect`, `forEach`, `count`）收尾，你可以构建出非常强大且易读的数据处理管道。\n\n多加练习，你会发现自己处理集合数据的代码会变得异常简洁和优雅。","categories":["Java编程语言"]},{"title":"Java线程复习","url":"/2025/10/15/Java线程复习/","content":"\n好的，我们来系统地复习 Java 线程相关的知识。线程是 Java 并发编程的核心，理解它对于编写高性能、响应式的应用程序至关重要。\n\n---\n\n### 第一部分：核心概念\n\n#### 1. 进程 vs 线程\n\n**进程**：\n- 操作系统资源分配的基本单位\n- 每个进程有独立的内存空间（堆、栈、代码区）\n- 进程间通信（IPC）比较复杂（如管道、信号、共享内存等）\n- 创建和销毁开销较大\n\n**线程**：\n- CPU 调度的基本单位，是进程内的执行单元\n- 同一进程的线程共享堆和方法区，但有独立的程序计数器和栈\n- 线程间通信相对简单（共享内存）\n- 创建和销毁开销较小\n\n#### 2. 线程的生命周期（状态）\n\nJava 线程有 6 种状态：\n1. **NEW**（新建）：线程被创建但尚未启动\n2. **RUNNABLE**（可运行）：正在运行或准备运行\n3. **BLOCKED**（阻塞）：等待监视器锁（synchronized）\n4. **WAITING**（等待）：无限期等待其他线程的特定动作\n5. **TIMED_WAITING**（超时等待）：有限时间等待\n6. **TERMINATED**（终止）：线程执行完毕\n\n#### 3. 创建线程的三种方式\n\n**1. 继承 Thread 类**\n```java\nclass MyThread extends Thread {\n    @Override\n    public void run() {\n        System.out.println(\"线程执行: \" + Thread.currentThread().getName());\n    }\n}\n\n// 使用\nMyThread thread = new MyThread();\nthread.start();\n```\n\n**2. 实现 Runnable 接口**（推荐）\n```java\nclass MyRunnable implements Runnable {\n    @Override\n    public void run() {\n        System.out.println(\"线程执行: \" + Thread.currentThread().getName());\n    }\n}\n\n// 使用\nThread thread = new Thread(new MyRunnable());\nthread.start();\n```\n\n**3. 实现 Callable 接口**（可返回结果）\n```java\nclass MyCallable implements Callable<String> {\n    @Override\n    public String call() throws Exception {\n        Thread.sleep(1000);\n        return \"任务完成: \" + Thread.currentThread().getName();\n    }\n}\n```\n\n#### 4. 线程同步与锁\n\n**关键问题**：多个线程访问共享资源时可能出现**竞态条件**。\n\n**解决方案**：\n1. **synchronized 关键字**\n   - 同步方法\n   - 同步代码块\n\n2. **Lock 接口**（更灵活）\n   - `ReentrantLock`：可重入锁\n   - `ReadWriteLock`：读写锁\n\n#### 5. 线程通信\n\n- `wait()`：让当前线程等待\n- `notify()`：唤醒一个等待的线程\n- `notifyAll()`：唤醒所有等待的线程\n\n#### 6. volatile 关键字\n\n保证变量的可见性，但不保证原子性。\n\n---\n\n### 第二部分：实际应用场景\n\n#### 场景 1：多线程下载文件\n\n```java\npublic class FileDownloader {\n    private static final int THREAD_COUNT = 4;\n    \n    public void downloadFile(String fileUrl, long fileSize) {\n        ExecutorService executor = Executors.newFixedThreadPool(THREAD_COUNT);\n        List<Future<Boolean>> futures = new ArrayList<>();\n        \n        // 计算每个线程下载的字节范围\n        long chunkSize = fileSize / THREAD_COUNT;\n        \n        for (int i = 0; i < THREAD_COUNT; i++) {\n            long startByte = i * chunkSize;\n            long endByte = (i == THREAD_COUNT - 1) ? fileSize - 1 : (i + 1) * chunkSize - 1;\n            \n            Callable<Boolean> downloadTask = new DownloadTask(fileUrl, startByte, endByte, \"part-\" + i);\n            futures.add(executor.submit(downloadTask));\n        }\n        \n        // 等待所有任务完成\n        for (Future<Boolean> future : futures) {\n            try {\n                if (!future.get()) {\n                    System.out.println(\"某个下载任务失败\");\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        \n        executor.shutdown();\n        System.out.println(\"文件下载完成\");\n    }\n}\n\nclass DownloadTask implements Callable<Boolean> {\n    private String url;\n    private long startByte;\n    private long endByte;\n    private String partName;\n    \n    public DownloadTask(String url, long startByte, long endByte, String partName) {\n        this.url = url;\n        this.startByte = startByte;\n        this.endByte = endByte;\n        this.partName = partName;\n    }\n    \n    @Override\n    public Boolean call() throws Exception {\n        System.out.println(Thread.currentThread().getName() + \" 下载范围: \" + startByte + \"-\" + endByte);\n        // 模拟下载过程\n        Thread.sleep(2000 + (long)(Math.random() * 2000));\n        System.out.println(Thread.currentThread().getName() + \" 完成下载: \" + partName);\n        return true;\n    }\n}\n```\n\n#### 场景 2：生产者-消费者模式\n\n```java\npublic class ProducerConsumerExample {\n    public static void main(String[] args) {\n        MessageQueue queue = new MessageQueue(5);\n        \n        // 创建生产者\n        Thread producer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    queue.produce(\"消息-\" + i);\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        });\n        \n        // 创建消费者\n        Thread consumer = new Thread(() -> {\n            for (int i = 0; i < 10; i++) {\n                try {\n                    String message = queue.consume();\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        });\n        \n        producer.start();\n        consumer.start();\n    }\n}\n\nclass MessageQueue {\n    private final String[] items;\n    private int putIndex;\n    private int takeIndex;\n    private int count;\n    \n    public MessageQueue(int capacity) {\n        items = new String[capacity];\n    }\n    \n    public synchronized void produce(String message) throws InterruptedException {\n        while (count == items.length) {\n            wait(); // 队列满，等待\n        }\n        \n        items[putIndex] = message;\n        putIndex = (putIndex + 1) % items.length;\n        count++;\n        System.out.println(\"生产: \" + message + \" [队列大小: \" + count + \"]\");\n        notifyAll(); // 通知消费者\n    }\n    \n    public synchronized String consume() throws InterruptedException {\n        while (count == 0) {\n            wait(); // 队列空，等待\n        }\n        \n        String message = items[takeIndex];\n        takeIndex = (takeIndex + 1) % items.length;\n        count--;\n        System.out.println(\"消费: \" + message + \" [队列大小: \" + count + \"]\");\n        notifyAll(); // 通知生产者\n        return message;\n    }\n}\n```\n\n#### 场景 3：使用线程池处理批量任务\n\n```java\npublic class ThreadPoolExample {\n    public static void main(String[] args) {\n        // 创建线程池\n        ExecutorService executor = Executors.newFixedThreadPool(3);\n        List<Future<Integer>> results = new ArrayList<>();\n        \n        // 提交任务\n        for (int i = 1; i <= 10; i++) {\n            final int taskId = i;\n            Callable<Integer> task = () -> {\n                System.out.println(\"执行任务 \" + taskId + \" 线程: \" + Thread.currentThread().getName());\n                Thread.sleep(1000); // 模拟任务执行\n                return taskId * taskId; // 返回平方值\n            };\n            results.add(executor.submit(task));\n        }\n        \n        // 获取结果\n        for (Future<Integer> result : results) {\n            try {\n                System.out.println(\"任务结果: \" + result.get());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        \n        executor.shutdown();\n    }\n}\n```\n\n---\n\n### 第三部分：常用的线程使用模式\n\n#### 1. 线程池的最佳实践\n\n```java\n// 推荐使用 ThreadPoolExecutor 自定义参数\nThreadPoolExecutor executor = new ThreadPoolExecutor(\n    5, // 核心线程数\n    10, // 最大线程数\n    60L, // 空闲线程存活时间\n    TimeUnit.SECONDS, // 时间单位\n    new ArrayBlockingQueue<>(100), // 工作队列\n    new ThreadPoolExecutor.CallerRunsPolicy() // 拒绝策略\n);\n```\n\n#### 2. 使用 CompletableFuture 进行异步编程\n\n```java\npublic class CompletableFutureExample {\n    public static void main(String[] args) throws Exception {\n        // 异步执行任务\n        CompletableFuture<String> future = CompletableFuture.supplyAsync(() -> {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n            return \"任务完成\";\n        });\n        \n        // 任务完成后执行回调\n        future.thenAccept(result -> {\n            System.out.println(\"收到结果: \" + result);\n        });\n        \n        // 组合多个异步任务\n        CompletableFuture<String> combined = future\n            .thenApply(result -> result + \"，开始新任务\")\n            .thenApply(String::toUpperCase);\n        \n        System.out.println(\"最终结果: \" + combined.get());\n    }\n}\n```\n\n#### 3. 使用 volatile 保证可见性\n\n```java\npublic class VolatileExample {\n    private volatile boolean running = true;\n    \n    public void stop() {\n        running = false;\n    }\n    \n    public void work() {\n        while (running) {\n            // 执行工作\n            System.out.println(\"工作中...\");\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        System.out.println(\"工作结束\");\n    }\n}\n```\n\n#### 4. 使用 Atomic 类保证原子性\n\n```java\npublic class AtomicExample {\n    private AtomicInteger counter = new AtomicInteger(0);\n    \n    public void increment() {\n        counter.incrementAndGet();\n    }\n    \n    public int getCount() {\n        return counter.get();\n    }\n}\n```\n\n### 重要注意事项\n\n1. **避免死锁**：按固定顺序获取锁\n2. **避免线程泄漏**：确保使用线程池并正确关闭\n3. **处理异常**：在 Runnable 的 run 方法中捕获所有异常\n4. **资源清理**：使用 try-finally 或 try-with-resources 确保资源释放\n5. **性能考虑**：避免过度同步，尽量使用局部变量\n\n### 总结\n\nJava 线程编程的核心要点：\n- **理解线程生命周期**和状态转换\n- **掌握同步机制**：synchronized 和 Lock\n- **熟练使用线程池**管理线程资源\n- **了解现代并发工具**：CompletableFuture、Atomic 类\n- **遵循最佳实践**：避免死锁、正确处理异常\n\n通过实际场景的练习，你可以更好地理解这些概念并在实际项目中正确应用它们。","categories":["Java编程语言"]},{"title":"jQuery 的复习指南","url":"/2025/10/15/jQuery 复习指南/","content":"\n## 一、jQuery 概述与作用\n\njQuery 是一个快速、简洁的 JavaScript 库，它简化了 HTML 文档遍历、事件处理、动画和 Ajax 交互等操作。\n\n**核心作用：**\n- DOM 操作简化\n- 事件处理统一\n- 动画效果创建\n- Ajax 请求封装\n- 跨浏览器兼容性处理\n\n## 二、应用场景\n\n1. **DOM 操作** - 快速选择、修改页面元素\n2. **动态交互** - 实现各种用户交互效果\n3. **表单处理** - 验证、提交、数据获取\n4. **Ajax 应用** - 异步数据加载\n5. **响应式界面** - 创建动态响应式组件\n\n## 三、实际问题演示\n\n下面通过一个实际的购物车功能来展示 jQuery 的作用：\n\n```html\n<!DOCTYPE html>\n<html lang=\"zh-CN\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>jQuery 购物车示例</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n            min-height: 100vh;\n            padding: 20px;\n        }\n        \n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        \n        h1 {\n            text-align: center;\n            color: #2c3e50;\n            margin-bottom: 30px;\n            font-size: 2.5rem;\n        }\n        \n        .content {\n            display: flex;\n            gap: 30px;\n            flex-wrap: wrap;\n        }\n        \n        .products {\n            flex: 3;\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n            gap: 20px;\n        }\n        \n        .cart-container {\n            flex: 1;\n            min-width: 300px;\n            background: white;\n            border-radius: 10px;\n            padding: 20px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n        }\n        \n        .product-card {\n            background: white;\n            border-radius: 10px;\n            overflow: hidden;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n            transition: transform 0.3s ease;\n        }\n        \n        .product-card:hover {\n            transform: translateY(-5px);\n        }\n        \n        .product-image {\n            height: 180px;\n            background-color: #f8f9fa;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 3rem;\n            color: #3498db;\n        }\n        \n        .product-info {\n            padding: 15px;\n        }\n        \n        .product-title {\n            font-size: 1.2rem;\n            margin-bottom: 10px;\n            color: #2c3e50;\n        }\n        \n        .product-price {\n            font-size: 1.5rem;\n            color: #e74c3c;\n            margin-bottom: 15px;\n            font-weight: bold;\n        }\n        \n        .add-to-cart {\n            width: 100%;\n            padding: 10px;\n            background: #3498db;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1rem;\n            transition: background 0.3s;\n        }\n        \n        .add-to-cart:hover {\n            background: #2980b9;\n        }\n        \n        .cart-title {\n            font-size: 1.5rem;\n            margin-bottom: 20px;\n            color: #2c3e50;\n            border-bottom: 2px solid #eee;\n            padding-bottom: 10px;\n        }\n        \n        .cart-items {\n            margin-bottom: 20px;\n            max-height: 400px;\n            overflow-y: auto;\n        }\n        \n        .cart-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 10px 0;\n            border-bottom: 1px solid #eee;\n        }\n        \n        .item-name {\n            flex: 2;\n        }\n        \n        .item-quantity {\n            display: flex;\n            align-items: center;\n            gap: 10px;\n        }\n        \n        .quantity-btn {\n            width: 25px;\n            height: 25px;\n            border-radius: 50%;\n            border: none;\n            background: #3498db;\n            color: white;\n            cursor: pointer;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .remove-btn {\n            background: #e74c3c;\n            color: white;\n            border: none;\n            border-radius: 3px;\n            padding: 5px 10px;\n            cursor: pointer;\n        }\n        \n        .cart-total {\n            font-size: 1.3rem;\n            font-weight: bold;\n            text-align: right;\n            margin-top: 20px;\n            padding-top: 10px;\n            border-top: 2px solid #eee;\n        }\n        \n        .empty-cart {\n            text-align: center;\n            color: #7f8c8d;\n            padding: 20px 0;\n        }\n        \n        .checkout-btn {\n            width: 100%;\n            padding: 12px;\n            background: #2ecc71;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            font-size: 1.1rem;\n            cursor: pointer;\n            margin-top: 20px;\n            transition: background 0.3s;\n        }\n        \n        .checkout-btn:hover {\n            background: #27ae60;\n        }\n        \n        .checkout-btn:disabled {\n            background: #95a5a6;\n            cursor: not-allowed;\n        }\n        \n        .notification {\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            padding: 15px 20px;\n            background: #2ecc71;\n            color: white;\n            border-radius: 5px;\n            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);\n            display: none;\n            z-index: 1000;\n        }\n        \n        @media (max-width: 768px) {\n            .content {\n                flex-direction: column;\n            }\n            \n            .products {\n                grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>jQuery 购物车示例</h1>\n        \n        <div class=\"content\">\n            <div class=\"products\">\n                <!-- 产品将通过jQuery动态添加 -->\n            </div>\n            \n            <div class=\"cart-container\">\n                <h2 class=\"cart-title\">购物车</h2>\n                <div class=\"cart-items\">\n                    <div class=\"empty-cart\">购物车为空</div>\n                </div>\n                <div class=\"cart-total\">总计: ¥0.00</div>\n                <button class=\"checkout-btn\" disabled>结算</button>\n            </div>\n        </div>\n    </div>\n    \n    <div class=\"notification\">商品已添加到购物车！</div>\n\n    <script>\n        // 产品数据\n        const products = [\n            { id: 1, name: \"无线耳机\", price: 299, icon: \"🎧\" },\n            { id: 2, name: \"智能手机\", price: 3999, icon: \"📱\" },\n            { id: 3, name: \"平板电脑\", price: 2599, icon: \"📟\" },\n            { id: 4, name: \"智能手表\", price: 1299, icon: \"⌚\" },\n            { id: 5, name: \"蓝牙音箱\", price: 399, icon: \"🔊\" },\n            { id: 6, name: \"笔记本电脑\", price: 5999, icon: \"💻\" }\n        ];\n        \n        // 购物车数据\n        let cart = [];\n        \n        // 文档就绪后执行 - jQuery核心特性\n        $(document).ready(function() {\n            // 渲染产品列表\n            renderProducts();\n            \n            // 更新购物车显示\n            updateCartDisplay();\n            \n            // 绑定结算按钮事件\n            $('.checkout-btn').on('click', function() {\n                if (cart.length > 0) {\n                    alert('感谢您的购买！总金额：¥' + calculateTotal().toFixed(2));\n                    // 清空购物车\n                    cart = [];\n                    updateCartDisplay();\n                }\n            });\n        });\n        \n        // 渲染产品列表\n        function renderProducts() {\n            const $productsContainer = $('.products');\n            \n            // 使用jQuery遍历产品数据并创建产品卡片\n            $.each(products, function(index, product) {\n                const $productCard = $('<div>').addClass('product-card');\n                \n                $productCard.html(`\n                    <div class=\"product-image\">${product.icon}</div>\n                    <div class=\"product-info\">\n                        <h3 class=\"product-title\">${product.name}</h3>\n                        <div class=\"product-price\">¥${product.price.toFixed(2)}</div>\n                        <button class=\"add-to-cart\" data-id=\"${product.id}\">加入购物车</button>\n                    </div>\n                `);\n                \n                // 添加到产品容器\n                $productsContainer.append($productCard);\n            });\n            \n            // 使用事件委托绑定添加购物车事件\n            $('.products').on('click', '.add-to-cart', function() {\n                const productId = parseInt($(this).data('id'));\n                addToCart(productId);\n                showNotification();\n            });\n        }\n        \n        // 添加商品到购物车\n        function addToCart(productId) {\n            const product = products.find(p => p.id === productId);\n            \n            if (product) {\n                // 检查商品是否已在购物车中\n                const existingItem = cart.find(item => item.id === productId);\n                \n                if (existingItem) {\n                    existingItem.quantity++;\n                } else {\n                    cart.push({\n                        id: product.id,\n                        name: product.name,\n                        price: product.price,\n                        quantity: 1,\n                        icon: product.icon\n                    });\n                }\n                \n                // 更新购物车显示\n                updateCartDisplay();\n            }\n        }\n        \n        // 更新购物车显示\n        function updateCartDisplay() {\n            const $cartItems = $('.cart-items');\n            const $cartTotal = $('.cart-total');\n            const $checkoutBtn = $('.checkout-btn');\n            const $emptyCart = $cartItems.find('.empty-cart');\n            \n            // 清空购物车显示\n            $cartItems.find('.cart-item').remove();\n            \n            if (cart.length === 0) {\n                // 显示购物车为空消息\n                if ($emptyCart.length === 0) {\n                    $cartItems.append('<div class=\"empty-cart\">购物车为空</div>');\n                } else {\n                    $emptyCart.show();\n                }\n                $checkoutBtn.prop('disabled', true);\n            } else {\n                // 隐藏购物车为空消息\n                $emptyCart.hide();\n                \n                // 添加购物车商品\n                $.each(cart, function(index, item) {\n                    const $cartItem = $('<div>').addClass('cart-item');\n                    \n                    $cartItem.html(`\n                        <div class=\"item-name\">\n                            <span>${item.icon}</span> ${item.name}\n                        </div>\n                        <div class=\"item-quantity\">\n                            <button class=\"quantity-btn minus\" data-id=\"${item.id}\">-</button>\n                            <span>${item.quantity}</span>\n                            <button class=\"quantity-btn plus\" data-id=\"${item.id}\">+</button>\n                        </div>\n                        <div class=\"item-price\">¥${(item.price * item.quantity).toFixed(2)}</div>\n                        <button class=\"remove-btn\" data-id=\"${item.id}\">删除</button>\n                    `);\n                    \n                    $cartItems.append($cartItem);\n                });\n                \n                $checkoutBtn.prop('disabled', false);\n            }\n            \n            // 更新总计\n            const total = calculateTotal();\n            $cartTotal.text(`总计: ¥${total.toFixed(2)}`);\n            \n            // 绑定购物车项目事件\n            bindCartItemEvents();\n        }\n        \n        // 绑定购物车项目事件\n        function bindCartItemEvents() {\n            // 减少数量\n            $('.minus').on('click', function() {\n                const productId = parseInt($(this).data('id'));\n                const item = cart.find(item => item.id === productId);\n                \n                if (item && item.quantity > 1) {\n                    item.quantity--;\n                    updateCartDisplay();\n                }\n            });\n            \n            // 增加数量\n            $('.plus').on('click', function() {\n                const productId = parseInt($(this).data('id'));\n                const item = cart.find(item => item.id === productId);\n                \n                if (item) {\n                    item.quantity++;\n                    updateCartDisplay();\n                }\n            });\n            \n            // 删除商品\n            $('.remove-btn').on('click', function() {\n                const productId = parseInt($(this).data('id'));\n                cart = cart.filter(item => item.id !== productId);\n                updateCartDisplay();\n            });\n        }\n        \n        // 计算购物车总价\n        function calculateTotal() {\n            let total = 0;\n            $.each(cart, function(index, item) {\n                total += item.price * item.quantity;\n            });\n            return total;\n        }\n        \n        // 显示通知\n        function showNotification() {\n            const $notification = $('.notification');\n            \n            // 使用jQuery动画显示通知\n            $notification.fadeIn(300);\n            \n            // 3秒后自动隐藏\n            setTimeout(function() {\n                $notification.fadeOut(300);\n            }, 3000);\n        }\n    </script>\n</body>\n</html>\n```\n\n## 四、jQuery 核心优势总结\n\n通过上面的购物车示例，我们可以看到 jQuery 的以下优势：\n\n1. **简洁的DOM操作** - 使用 `$()` 选择器快速获取元素\n2. **链式调用** - 方法可以连续调用，代码更简洁\n3. **事件处理** - 统一的事件绑定方法，兼容不同浏览器\n4. **动画效果** - 内置的动画方法如 `fadeIn()`, `fadeOut()`\n5. **Ajax支持** - 简化异步请求处理\n6. **跨浏览器兼容** - 自动处理浏览器差异\n\n## 五、jQuery 在现代开发中的定位\n\n虽然现代前端开发中，React、Vue 等框架更为流行，但 jQuery 仍然在以下场景中有其价值：\n\n- 传统项目的维护和升级\n- 简单的交互需求，不需要复杂状态管理\n- 与其他库或框架的集成\n- 快速原型开发\n\n希望这个复习指南能帮助你更好地理解和应用 jQuery！","categories":["Web开发"]},{"title":"Spring 框架中使用 Slf4j","url":"/2025/10/15/Spring 中 SLF4J + Log4j2 配置与使用/","content":"\n### 一、核心概念说明\n\n- **SLF4J**：日志门面（接口），提供统一的日志调用 API，不负责具体实现。\n- **Log4j2**：日志实现框架，负责日志的输出、格式化等具体功能。\n- 关系：SLF4J 作为接口，Log4j2 作为实现，项目中通过 SLF4J 调用，底层由 Log4j2 处理。\n\n### 二、步骤 1：添加依赖（Maven/Gradle）\n\n需排除 Spring 项目中默认的日志框架（如 Logback），避免冲突，再引入 SLF4J 和 Log4j2 依赖。\n\n#### Maven 配置（`pom.xml`）：\n\n```XML\n<!-- 排除 Spring Boot 默认的 Logback 依赖 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-logging</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n\n<!-- 引入 SLF4J + Log4j2 依赖 -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-log4j2</artifactId>\n</dependency>\n\n<!-- 可选：SLF4J 桥接器（若有其他日志框架需要适配） -->\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>log4j-over-slf4j</artifactId>\n    <version>1.7.36</version>\n</dependency>\n```\n\n#### Gradle 配置（`build.gradle`）：\n\n```Groovy\n// 排除默认 Logback\nconfigurations {\n    all {\n        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'\n    }\n}\n\n// 引入 Log4j2 依赖\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-log4j2'\n    implementation 'org.slf4j:log4j-over-slf4j:1.7.36' // 可选桥接器\n}\n```\n\n### 三、步骤 2：配置 `log4j2.xml` 文件\n\n将你提供的配置文件放在项目的 **`src/main/resources`** 目录下（Spring 会自动扫描该路径下的日志配置文件）。\n\n#### 配置文件说明（基于你的配置）：\n\n```XML\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- \n  - status=\"WARN\"：Log4j2 自身的日志级别（建议 WARN，避免输出过多框架日志）\n  - monitorInterval=\"30\"：30秒自动检测配置文件变化，无需重启应用\n-->\n<Configuration status=\"WARN\" monitorInterval=\"30\">\n    <!-- 全局属性：日志格式、路径、文件名 -->\n    <Properties>\n        <Property name=\"LOG_PATTERN\">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %c{1} - %msg%n</Property>\n        <Property name=\"LOG_PATH\">logs</Property> <!-- 日志存储路径（项目根目录下的 logs 文件夹） -->\n        <Property name=\"LOG_FILE_NAME\">app</Property> <!-- 日志文件名前缀 -->\n    </Properties>\n\n    <!-- 日志输出目标（Appenders） -->\n    <Appenders>\n        <!-- 1. 控制台输出 -->\n        <Console name=\"Console\" target=\"SYSTEM_OUT\">\n            <PatternLayout pattern=\"${LOG_PATTERN}\" /> <!-- 使用全局日志格式 -->\n            <ThresholdFilter level=\"DEBUG\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" /> <!-- 输出 DEBUG 及以上级别 -->\n        </Console>\n\n        <!-- 2. INFO 级别日志文件（滚动存储） -->\n        <RollingFile name=\"RollingFileInfo\" \n                     fileName=\"${LOG_PATH}/${LOG_FILE_NAME}-info.log\" <!-- 当前日志文件 -->\n                     filePattern=\"${LOG_PATH}/${LOG_FILE_NAME}-info-%d{yyyy-MM-dd}-%i.log\"> <!-- 滚动后文件名（按天+序号） -->\n            <ThresholdFilter level=\"INFO\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" /> <!-- 只记录 INFO 及以上（不含 ERROR） -->\n            <PatternLayout pattern=\"${LOG_PATTERN}\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\" /> <!-- 每天滚动一次 -->\n                <SizeBasedTriggeringPolicy size=\"100MB\" /> <!-- 单个文件超过 100MB 也滚动 -->\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\" /> <!-- 最多保留 30 天的日志 -->\n        </RollingFile>\n\n        <!-- 3. ERROR 级别日志文件（单独存储，便于排查问题） -->\n        <RollingFile name=\"RollingFileError\" \n                     fileName=\"${LOG_PATH}/${LOG_FILE_NAME}-error.log\"\n                     filePattern=\"${LOG_PATH}/${LOG_FILE_NAME}-error-%d{yyyy-MM-dd}-%i.log\">\n            <ThresholdFilter level=\"ERROR\" onMatch=\"ACCEPT\" onMismatch=\"DENY\" /> <!-- 只记录 ERROR 及以上 -->\n            <PatternLayout pattern=\"${LOG_PATTERN}\" />\n            <Policies>\n                <TimeBasedTriggeringPolicy interval=\"1\" />\n                <SizeBasedTriggeringPolicy size=\"100MB\" />\n            </Policies>\n            <DefaultRolloverStrategy max=\"30\" />\n        </RollingFile>\n    </Appenders>\n\n    <!-- 日志记录器（Loggers）：控制不同包的日志级别 -->\n    <Loggers>\n        <!-- 自定义包日志（例如你的业务代码包 com.example） -->\n        <Logger name=\"com.example\" level=\"DEBUG\" additivity=\"false\">\n            <!-- 绑定输出目标：控制台、INFO文件、ERROR文件 -->\n            <AppenderRef ref=\"Console\" />\n            <AppenderRef ref=\"RollingFileInfo\" />\n            <AppenderRef ref=\"RollingFileError\" />\n        </Logger>\n\n        <!-- 第三方框架日志过滤（例如 Spring 框架，降低日志级别避免冗余） -->\n        <Logger name=\"org.springframework\" level=\"WARN\" additivity=\"false\">\n            <AppenderRef ref=\"Console\" />\n            <AppenderRef ref=\"RollingFileError\" /> <!-- 只记录 Spring 的错误日志 -->\n        </Logger>\n\n        <!-- 根日志（默认日志规则，所有未匹配上面的包都遵循此规则） -->\n        <Root level=\"INFO\">\n            <AppenderRef ref=\"Console\" />\n            <AppenderRef ref=\"RollingFileInfo\" />\n            <AppenderRef ref=\"RollingFileError\" />\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n### 四、步骤 3：在代码中使用日志\n\n通过 SLF4J 的 `LoggerFactory` 获取日志对象，调用日志方法（与具体实现解耦）。\n\n#### 示例代码（Spring 组件中使用）：\n\n```Java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n    // 1. 获取日志对象（传入当前类的 Class，便于定位日志来源）\n    private static final Logger logger = LoggerFactory.getLogger(UserService.class);\n\n    public void login(String username) {\n        // 2. 输出不同级别的日志\n        logger.debug(\"用户 [{}] 开始登录（调试信息）\", username); // DEBUG 级别（开发调试用）\n        logger.info(\"用户 [{}] 登录成功（常规信息）\", username); // INFO 级别（正常业务记录）\n        try {\n            // 业务逻辑...\n        } catch (Exception e) {\n            logger.error(\"用户 [{}] 登录失败\", username, e); // ERROR 级别（异常信息，需传入异常对象）\n        }\n    }\n}\n```\n\n### 五、验证配置是否生效\n\n1. **启动项目**：Spring 会自动加载 `log4j2.xml`，并在控制台输出日志。\n2. **检查日志文件**：项目根目录下会生成 `logs` 文件夹，包含 `app-info.log` 和 `app-error.log`。\n3. **测试日志级别**：\n   1. `DEBUG` 级别日志：仅在控制台输出（因为 `Console` 的级别是 `DEBUG`）。\n   2. `INFO` 级别日志：同时输出到控制台和 `app-info.log`。\n   3. `ERROR` 级别日志：同时输出到控制台、`app-info.log` 和 `app-error.log`。\n\n### 六、常见问题解决\n\n1. **日志不输出**：\n   1. 检查依赖是否冲突（确保已排除 Logback，且 Log4j2 依赖正确）。\n   2. 确认 `log4j2.xml` 路径是否正确（必须在 `src/main/resources` 下）。\n   3. 检查日志级别：若代码中调用 `logger.debug()`，但 `Logger` 或 `Appender` 的级别高于 `DEBUG`（如 `INFO`），则不会输出。\n2. **日志文件不生成**：\n   1. 检查 `LOG_PATH` 路径是否有权限写入（例如 Linux 下需确保应用对 `logs` 文件夹有写权限）。\n   2. 尝试使用绝对路径（如 `D:/logs/` 或 `/var/logs/`）避免相对路径问题。\n3. **第三方框架日志过多**：\n   1. 在 `<Loggers>` 中添加对应包的 `Logger` 配置，降低级别（如 Spring 设为 `WARN`，MyBatis 设为 `INFO`）。\n\n通过以上步骤，即可在 Spring 项目中正确配置并使用 SLF4J + Log4j2，实现日志的控制台输出和文件滚动存储。","categories":["Java框架"]},{"title":"Spring解析XML与反射生成对象的原理","url":"/2025/10/15/Spring通过bean.xml解析与反射生成对象的原理/","content":"\n## 一、核心原理拆解\n\nSpring通过bean.xml生成对象的整体流程可分为4步：\n\n1. **加载XML配置文件**：将bean.xml文件读取到内存中。\n\n2. **解析XML文件**：使用DOM/SAX等解析技术，提取<bean>标签中的关键信息（如id、class全路径）。\n\n3. **反射创建对象**：根据class全路径，通过Java反射机制实例化对象。\n\n4. **存储对象到容器**：将创建好的对象存入Spring容器（如HashMap），后续通过id即可获取。\n\n## 二、自定义模拟实现Spring的XML解析与反射流程\n\n我们通过自定义一个简单的\"迷你Spring容器\"，模拟Spring解析bean.xml并生成对象的过程。\n\n### 步骤1：编写测试用的Bean和bean.xml配置文件\n\n首先定义一个普通的Java类（待Spring管理的Bean）和对应的XML配置文件。\n\n#### 1.1 测试Bean类\n\n```java\n\n// 模拟业务层Bean\npublic class UserService {\n    public void register() {\n        System.out.println(\"UserService: 用户注册成功\");\n    }\n}\n\n// 模拟数据访问层Bean\npublic class UserDao {\n    public void save() {\n        System.out.println(\"UserDao: 保存用户数据\");\n    }\n}\n```\n\n#### 1.2 bean.xml配置文件\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans>\n    \n    <bean id=\"userService\" class=\"com.example.UserService\"/>\n    \n    <bean id=\"userDao\" class=\"com.example.UserDao\"/>\n</beans>\n```\n\n### 步骤2：自定义迷你Spring容器（核心实现）\n\n自定义容器需实现XML解析、反射创建对象、容器存储三个核心功能，对应代码如下：\n\n```java\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\n// 自定义迷你Spring容器\npublic class MiniSpringContainer {\n    // 模拟Spring容器：存储Bean的id和对应的实例对象\n    private Map<String, Object> beanMap = new HashMap<>();\n\n    // 构造方法：传入XML配置文件路径，初始化容器\n    public MiniSpringContainer(String xmlPath) {\n        loadAndParseXml(xmlPath);\n    }\n\n    // 步骤1+2：加载并解析XML配置文件\n    private void loadAndParseXml(String xmlPath) {\n        try {\n            // 1. 创建XML解析器工厂\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            // 2. 创建解析器\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            // 3. 加载XML文件（通过类加载器获取资源流）\n            InputStream is = getClass().getClassLoader().getResourceAsStream(xmlPath);\n            // 4. 解析XML，得到文档对象\n            Document document = builder.parse(is);\n            // 5. 获取所有<bean>标签\n            NodeList beanNodeList = document.getElementsByTagName(\"bean\");\n\n            // 6. 遍历每个<bean>标签，提取id和class属性\n            for (int i = 0; i < beanNodeList.getLength(); i++) {\n                Element beanElement = (Element) beanNodeList.item(i);\n                String beanId = beanElement.getAttribute(\"id\"); // 获取id\n                String beanClass = beanElement.getAttribute(\"class\"); // 获取全类名\n\n                // 步骤3：通过反射创建Bean实例\n                Object beanInstance = createBeanByReflection(beanClass);\n                // 步骤4：将Bean存入容器\n                beanMap.put(beanId, beanInstance);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // 步骤3：通过反射创建Bean实例\n    private Object createBeanByReflection(String className) throws Exception {\n        // 1. 根据全类名获取Class对象\n        Class<?> clazz = Class.forName(className);\n        // 2. 调用Class对象的newInstance()方法创建实例（默认调用无参构造）\n        return clazz.newInstance();\n    }\n\n    // 对外提供获取Bean的方法（类似Spring的getBean()）\n    public Object getBean(String beanId) {\n        return beanMap.get(beanId);\n    }\n}\n```\n\n### 步骤3：测试自定义容器\n\n编写测试类，验证容器是否能正确解析XML并生成对象：\n\n```java\n\npublic class TestMiniSpring {\n    public static void main(String[] args) {\n        // 1. 创建自定义Spring容器，传入bean.xml路径\n        MiniSpringContainer container = new MiniSpringContainer(\"bean.xml\");\n\n        // 2. 从容器中获取UserService实例（无需手动new）\n        UserService userService = (UserService) container.getBean(\"userService\");\n        userService.register(); // 调用方法，验证对象是否可用\n\n        // 3. 从容器中获取UserDao实例\n        UserDao userDao = (UserDao) container.getBean(\"userDao\");\n        userDao.save();\n    }\n}\n```\n\n### 步骤4：运行结果与分析\n\n运行TestMiniSpring，输出如下：\n\n```Plain Text\n\nUserService: 用户注册成功\nUserDao: 保存用户数据\n```\n\n结果说明：自定义容器成功解析了bean.xml，通过反射创建了UserService和UserDao实例，并存储到容器中，符合预期。\n\n## 三、Spring源码层面的关键细节\n\n上述自定义实现是简化版，Spring源码中对这一过程做了更复杂的优化，核心细节如下：\n\n- **XML解析器**：Spring内部使用**SAX解析器**（而非DOM），因为SAX是流式解析，内存占用更低，适合大型XML配置。\n\n- **Bean的生命周期管理**：源码中并非直接调用newInstance()，而是通过`BeanDefinition`封装Bean的元信息（如构造方法、属性值），再通过`BeanFactory`的`createBean()`方法创建实例，支持构造方法注入、属性注入等。\n\n- **反射优化**：Spring会缓存Class对象和构造方法，避免重复反射带来的性能损耗；同时支持通过CGLIB动态代理创建子类实例（针对无接口的Bean）。\n\n- **异常处理**：源码中对XML格式错误、类不存在、无参构造缺失等异常做了详细的捕获和处理，提供更友好的错误提示。\n\n## 四、总结\n\nSpring通过bean.xml生成对象的本质是：**XML解析提取元信息 + 反射机制实例化对象 + 容器统一管理**。这一过程将对象的创建权从开发者手中转移到容器，实现了\"控制反转\"（IOC）的核心思想。\n\n自定义迷你容器的实现虽然简单，但完整还原了核心流程；而Spring源码在此基础上通过BeanDefinition、生命周期回调、反射优化等机制，实现了更强大、更灵活的Bean管理能力。","categories":["Java框架"]},{"title":"Spring 框架中 IOC 和 AOP 的价值及应用","url":"/2025/10/15/Spring的IOC和AOP/","content":"\n### 一、IOC（控制反转）：反转对象的创建权\n\n#### 1. 核心概念\n\nIOC的核心是“**将对象的创建、管理和依赖关系的维护交给容器**”，而非由开发者在代码中手动`new`对象。开发者只需定义对象的“蓝图”（如类、依赖关系），容器（Spring容器）会自动完成对象的创建和组装。\n\n#### 2. 传统开发模式 vs IOC模式\n\n**传统模式**：  \n\n假设开发一个用户服务（`UserService`），它依赖于数据访问层（`UserDao`），代码如下：\n\n```Java\n// 数据访问层\npublic class UserDao {\n    public void save() {\n        System.out.println(\"保存用户数据\");\n    }\n}\n\n// 业务层\npublic class UserService {\n    // 手动创建依赖对象\n    private UserDao userDao = new UserDao(); \n\n    public void register() {\n        userDao.save(); // 调用依赖的方法\n    }\n}\n\n// 测试\npublic class Test {\n    public static void main(String[] args) {\n        UserService service = new UserService(); // 手动创建服务对象\n        service.register();\n    }\n}\n```\n\n**问题**：  \n\n- 依赖关系硬编码（`new UserDao()`），如果`UserDao`的实现变更（如从`MySQLDao`改为`OracleDao`），需要修改`UserService`的代码，违反“开闭原则”。  \n- 对象创建和管理分散在代码各处，不利于统一控制（如单例、生命周期管理）。\n\n**IOC模式**：  \n\n通过Spring容器管理对象，开发者只需声明依赖关系：\n\n```Java\n// 1. 定义组件（交给Spring管理）\n@Repository // 标记为数据访问层组件\npublic class UserDao {\n    public void save() {\n        System.out.println(\"保存用户数据\");\n    }\n}\n\n@Service // 标记为业务层组件\npublic class UserService {\n    // 声明依赖（Spring自动注入）\n    @Autowired \n    private UserDao userDao; \n\n    public void register() {\n        userDao.save();\n    }\n}\n\n// 2. Spring配置（扫描组件）\n@Configuration\n@ComponentScan(\"com.example\") // 扫描指定包下的组件\npublic class AppConfig {}\n\n// 3. 测试（从容器获取对象）\npublic class Test {\n    public static void main(String[] args) {\n        // 创建Spring容器\n        ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);\n        // 从容器获取UserService（无需手动new）\n        UserService service = context.getBean(UserService.class);\n        service.register();\n    }\n}\n```\n\n**改进**：  \n\n- 依赖关系由Spring自动注入（`@Autowired`），`UserService`不再关心`UserDao`的创建细节，实现了解耦。  \n- 若需更换`UserDao`的实现（如`UserDaoImpl`），只需修改`UserDao`的实现类，无需改动`UserService`，符合“开闭原则”。  \n\n#### 3. IOC在项目中的作用\n\n- **解耦**：消除对象间的硬编码依赖，降低模块间耦合度。  \n- **集中管理**：容器统一管理对象的创建、生命周期（如单例/多例）、初始化/销毁，简化开发。  \n- **灵活性**：通过配置（注解或XML）轻松切换依赖实现，适应需求变化。  \n\n### 二、AOP（面向切面编程）：分离交叉关注点\n\n#### 1. 核心概念\n\nAOP的核心是“**将分散在多个模块中的重复代码（如日志、事务、权限校验）抽取为独立的“切面”，在不修改原有代码的前提下，动态织入到目标方法中**”。这些重复代码被称为“交叉关注点”。\n\n#### 2. 传统开发模式 vs AOP模式\n\n**传统模式**：  \n\n在多个业务方法中添加日志打印（记录方法调用时间、参数）：\n\n```Java\n@Service\npublic class UserService {\n    @Autowired\n    private UserDao userDao;\n\n    public void register(String username) {\n        // 重复代码：日志\n        System.out.println(\"register方法开始，参数：\" + username);\n        long start = System.currentTimeMillis();\n\n        // 核心业务\n        userDao.save();\n\n        // 重复代码：日志\n        long end = System.currentTimeMillis();\n        System.out.println(\"register方法结束，耗时：\" + (end - start) + \"ms\");\n    }\n\n    public void login(String username) {\n        // 重复代码：日志\n        System.out.println(\"login方法开始，参数：\" + username);\n        long start = System.currentTimeMillis();\n\n        // 核心业务\n        System.out.println(\"用户登录：\" + username);\n\n        // 重复代码：日志\n        long end = System.currentTimeMillis();\n        System.out.println(\"login方法结束，耗时：\" + (end - start) + \"ms\");\n    }\n}\n```\n\n**问题**：  \n\n- 日志代码与业务代码混杂，违背“单一职责原则”（一个方法只做一件事）。  \n- 若需修改日志格式，需修改所有包含日志的方法，维护成本高。  \n\n**AOP模式**：  \n\n将日志代码抽取为切面，通过Spring AOP织入目标方法：\n\n```Java\n// 1. 定义切面（日志功能）\n@Aspect // 标记为切面\n@Component\npublic class LogAspect {\n    // 切入点：匹配UserService中所有方法\n    @Pointcut(\"execution(* com.example.UserService.*(..))\")\n    public void userServicePointcut() {}\n\n    // 环绕通知：在目标方法前后执行\n    @Around(\"userServicePointcut()\")\n    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {\n        // 方法执行前：打印参数和开始时间\n        String methodName = joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        System.out.println(methodName + \"方法开始，参数：\" + Arrays.toString(args));\n        long start = System.currentTimeMillis();\n\n        // 执行目标方法（核心业务）\n        Object result = joinPoint.proceed();\n\n        // 方法执行后：打印耗时\n        long end = System.currentTimeMillis();\n        System.out.println(methodName + \"方法结束，耗时：\" + (end - start) + \"ms\");\n        return result;\n    }\n}\n\n// 2. 业务类（只保留核心逻辑）\n@Service\npublic class UserService {\n    @Autowired\n    private UserDao userDao;\n\n    public void register(String username) {\n        userDao.save(); // 仅核心业务\n    }\n\n    public void login(String username) {\n        System.out.println(\"用户登录：\" + username); // 仅核心业务\n    }\n}\n\n// 3. 开启AOP（在配置类添加注解）\n@Configuration\n@ComponentScan(\"com.example\")\n@EnableAspectJAutoProxy // 开启AOP支持\npublic class AppConfig {}\n```\n\n**改进**：  \n\n- 日志代码与业务代码完全分离，业务类专注于核心逻辑，符合“单一职责原则”。  \n- 若需修改日志逻辑，只需修改`LogAspect`，无需改动业务类，维护成本极低。  \n\n#### 3. AOP在项目中的作用\n\n- **分离关注点**：将非核心逻辑（日志、事务、权限）从业务代码中剥离，提高代码可读性和可维护性。  \n- **代码复用**：交叉关注点只需实现一次，通过切面织入到多个目标方法，避免重复编码。  \n- **动态增强**：无需修改原有代码，即可在运行时为方法添加额外功能（如事务回滚、异常处理）。  \n\n### 三、IOC与AOP结合解决实际问题\n\n#### 场景：电商订单系统中的“下单”功能\n\n需求：  \n\n1. 下单时需校验用户权限（未登录用户不能下单）。  \n2. 记录下单操作的日志（方法参数、耗时）。  \n3. 保证下单过程的事务一致性（库存扣减和订单创建需同时成功或失败）。  \n\n**传统开发模式的问题**：  \n\n- 权限校验、日志、事务代码会嵌入到`OrderService`的`createOrder`方法中，导致代码臃肿。  \n- 若其他业务（如“取消订单”）也需要这些功能，需重复编写代码。  \n\n**IOC + AOP的解决方案**：  \n\n1. **IOC**：管理`OrderService`、`UserDao`、`OrderDao`等对象的依赖关系，通过`@Autowired`自动注入，避免硬编码。  \n2. **AOP**：  \n   1. 权限校验切面：拦截下单方法，校验用户是否登录，未登录则抛出异常。  \n   2. 日志切面：记录下单方法的参数、执行时间。  \n   3. 事务切面：通过`@Transactional`注解（Spring的声明式事务基于AOP实现）保证事务一致性。  \n\n**代码示例**：\n\n```Java\n// 1. 业务层：订单服务（仅核心逻辑）\n@Service\npublic class OrderService {\n    @Autowired\n    private OrderDao orderDao;\n    @Autowired\n    private InventoryDao inventoryDao;\n\n    // 下单方法（核心逻辑）\n    @Transactional // 事务切面（AOP）\n    public void createOrder(Long userId, Long productId, int quantity) {\n        // 核心业务：扣减库存 + 创建订单\n        inventoryDao.reduceStock(productId, quantity);\n        orderDao.create(new Order(userId, productId, quantity));\n    }\n}\n\n// 2. 权限校验切面（AOP）\n@Aspect\n@Component\npublic class AuthAspect {\n    @Autowired\n    private UserService userService;\n\n    @Before(\"execution(* com.example.OrderService.createOrder(..)) && args(userId, ..)\")\n    public void checkAuth(Long userId) {\n        if (!userService.isLogin(userId)) {\n            throw new RuntimeException(\"用户未登录，无法下单\");\n        }\n    }\n}\n\n// 3. 日志切面（AOP）\n@Aspect\n@Component\npublic class LogAspect {\n    @Around(\"execution(* com.example.OrderService.createOrder(..))\")\n    public Object logOrder(ProceedingJoinPoint joinPoint) throws Throwable {\n        // 记录参数\n        Object[] args = joinPoint.getArgs();\n        System.out.println(\"下单参数：userId=\" + args[0] + \", productId=\" + args[1] + \", quantity=\" + args[2]);\n        long start = System.currentTimeMillis();\n\n        // 执行目标方法\n        Object result = joinPoint.proceed();\n\n        // 记录耗时\n        System.out.println(\"下单完成，耗时：\" + (System.currentTimeMillis() - start) + \"ms\");\n        return result;\n    }\n}\n```\n\n**价值体现**：  \n\n- **IOC**：`OrderService`无需手动创建`OrderDao`和`InventoryDao`，依赖关系由容器管理，降低耦合。  \n- **AOP**：权限校验、日志、事务逻辑与下单核心业务分离，代码清晰；若后续需修改权限规则或日志格式，只需调整对应切面，不影响业务代码。  \n- **扩展性**：若新增“订单超时取消”功能，只需在新方法上添加`@Transactional`和日志切面，无需重复开发非核心逻辑。  \n\n### 总结\n\n- **IOC** 解决了“对象依赖管理”的问题，通过容器反转控制，实现模块解耦和集中管理。  \n- **AOP** 解决了“交叉关注点复用”的问题，通过切面分离非核心逻辑，提升代码可维护性。  \n- 两者结合是Spring的核心竞争力：IOC为AOP提供了对象管理的基础（切面和目标对象均由容器管理），AOP则基于IOC实现了无侵入式的功能增强，共同支撑起灵活、可扩展的企业级应用开发。","categories":["Java框架"]},{"title":"关于我","url":"/about/index.html","content":"\n# 关于我\n\n## 👋 自我介绍\n\n这里写你的自我介绍...\n\n## 🛠 技术栈\n\n- **前端**: JavaScript, Vue, React\n- **后端**: Node.js, Python, Java\n- **数据库**: MySQL, MongoDB, Redis\n\n## 📈 我的项目\n\n### 项目一\n项目描述...\n\n### 项目二  \n项目描述...\n\n## 📫 联系我\n\n- **邮箱**: zero201913@outlook.com\n- **GitHub**: [你的GitHub](https://github.com/zero201913)\n- **博客**: [你的博客](http://zero02.space)\n\n---\n\n感谢访问我的博客！"}]